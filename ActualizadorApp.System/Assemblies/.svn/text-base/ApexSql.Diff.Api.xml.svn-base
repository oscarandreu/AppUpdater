<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ApexSql.Diff.Api</name>
    </assembly>
    <members>
        <member name="T:ApexSql.Diff.SqlServer.UserDefinedDataTypeCollection">
            <summary>
            Collection of UserDefinedDataType objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.SqlObjectCollection`1">
            <summary>
            A base collection of NamedSqlObject objects
            </summary>
            <typeparam name="T">The class successor of the NamedSqlObject</typeparam>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.SqlObjectCollection`1.CreateObject(System.Object)">
            <summary>
            Creates object.
            </summary>
            <param name="obj">object may be inherited from SqlSubObject, SqlObject, Sql2005MessageTypeInContract classes</param>
            <returns></returns>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.SqlObjectCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.SqlObjectCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.SqlObjectCollection`1.Contains(`0)">
            <summary>
            Determines whether the collection contains a specific value. Value can be null.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns> true if item is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.SqlObjectCollection`1.Contains(System.String)">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="fullyQualifiedName">The fully qualified name of the object to locate in the collection.</param>
            <returns> true if object is found in the collection; otherwise, false.</returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.SqlObjectCollection`1.Item(System.String)">
            <summary>
            Returns the object by fully qualified name
            </summary>
            <param name="fullyQualifiedName">The fully qualified name of the object to get</param>
            <returns>The object if it was found, otherwise - null</returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.SqlObjectCollection`1.Item(System.Int32)">
            <summary>
            Returns the object by index
            </summary>
            <param name="index">The zero-based index of the element to get</param>
            <returns>The object at the specified index, otherwise - null</returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.SqlObjectCollection`1.Count">
            <summary>
            The count of objects in the collection
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.OwnerFilterItem">
            <summary>
            An owner filter item
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.OwnerFilterItem.Name">
            <summary>
            The name of the owner
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.OwnerFilterItem.IsIncluded">
            <summary>
            Is owner included to the filter
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.OwnerFilter">
            <summary>
            An owner filter settings for using with SQL 2000
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Structure.OwnerFilter.ResetMappedCollections">
            <summary>Resets mapped collections</summary>
        </member>
        <member name="M:ApexSql.Diff.Structure.OwnerFilter.#ctor(ApexSql.Diff.Structure.StructureProject,ApexSql.Diff.ResetMappedCollections)">
            <summary>
            Default Constructor
            </summary>
            <param name="structure">The parent class</param>
            <param name="onResetMappedCollections">The delegate to reload object collections when neccessary</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.OwnerFilter.SetCheckAll(System.Boolean)">
            <summary>
            Sets the checked state on all filters
            </summary>
            <param name="check">New check state</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.OwnerFilter.IncludeAll">
            <summary>
            Include all owners to the filter
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Structure.OwnerFilter.ExcludeAll">
            <summary>
            Exclude all owners from the filter
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Structure.OwnerFilter.SetCheckOnOwner(System.String,System.Boolean)">
            <summary>
            Set check state for a specified Owner
            </summary>
            <param name="owner">Owner</param>
            <param name="check">Check state</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.OwnerFilter.GetOwnerState(System.String)">
            <summary>
            Include a specified owner to owner filter
            </summary>
            <param name="owner">owner</param>
            <return>Owner included state</return>
        </member>
        <member name="M:ApexSql.Diff.Structure.OwnerFilter.IncludeOwner(System.String)">
            <summary>
            Include a specified owner to owner filter
            </summary>
            <param name="owner">owner</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.OwnerFilter.ExcludeOwner(System.String)">
            <summary>
            Exclude a specified owner from owner filter
            </summary>
            <param name="owner">owner</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.OwnerFilter.System#Collections#Generic#IEnumerable{ApexSql#Diff#Structure#OwnerFilterItem}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:ApexSql.Diff.Structure.OwnerFilter.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:ApexSql.Diff.Structure.OwnerFilter.Count">
            <summary>
            The count of elements in the collection
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.OwnerFilter.Item(System.Int32)">
            <summary>
            Returns the owner filter item
            </summary>
            <param name="index">The zero-based index of the element to get</param>
            <returns>The owner filter item</returns>
        </member>
        <member name="P:ApexSql.Diff.Structure.OwnerFilter.Item(System.String)">
            <summary>
            Returns the owner filter item
            </summary>
            <param name="ownerName">The name of the owner</param>
            <returns>The owner filter item</returns>
        </member>
        <member name="P:ApexSql.Diff.Structure.OwnerFilter.OwnerFilterType">
            <summary>
            Defines how objects with different owners should be processed
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.StatisticCollection">
            <summary>
            Collection of Statistic objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.RoleCollection">
            <summary>
            Collection of Role objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.RangeType">
            <summary>
            The RangeType enumeration contains values that are used to specify the type range.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.RangeType.Left">
            <summary>
            The left range.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.RangeType.Right">
            <summary>
            The right range. 
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.IndexCollection">
            <summary>
            Collection of Index objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.ForeignKeyCollection">
            <summary>
            Collection of ForeignKey objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.ForeignKey">
            <summary>
            The ForeignKey object represents a Microsoft SQL Server foreign key. Relationship between 2 tables.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.NamedSqlObject">
            <summary>
            The NamedSqlObject object represents a named Microsoft SQL Server object.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.SqlObjectBase">
            <summary>
            Base class for all meta-data objects, except collections. 
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.SqlObjectBase.#ctor(ApexSql.Common.Scripting.ISqlObject,ApexSql.Diff.SqlServer.Database)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.SqlObjectBase.#ctor(ApexSql.Common.Scripting.ISqlSubObject,ApexSql.Diff.SqlServer.Database)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.SqlObjectBase.#ctor(ApexSql.Diff.SqlServer.Database)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.SqlObjectBase.GenerateScript(ApexSql.Common.Scripting.IScriptableObject,System.Boolean)">
            <summary>
            Generates a Transact-SQL script that can be used to re-create the SQL Server role
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.SqlObjectBase.GenerateScript">
            <summary>
            Generates a Transact-SQL script that can be used to re-create the SQL Server role
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.SqlObjectBase.GenerateScript(ApexSql.Diff.SqlServer.ScriptingOptions)">
            <summary>
            Generates script.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.SqlObjectBase.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.NamedSqlObject.ToString">
            <summary>
            Returns a String that represents the current Object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.NamedSqlObject.Name">
            <summary>
            Object name accessor.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.NamedSqlObject.QualifiedName">
            <summary>
            Gets the fully qualified name of object.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.IScriptable">
            <summary>
            The IScriptable class represents the interface used to create Transact-SQL scripts of SQL objects.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.IScriptable.Script">
            <summary>
            Generates a Transact-SQL script that can be used to re-create the SQL object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.IScriptable.Script(ApexSql.Diff.SqlServer.ScriptingOptions)">
            <summary>
            Generates a Transact-SQL script that can be used to re-create/drop the SQL object.
            </summary>
            <param name="scriptingOptions">Scripting options.</param>
            <returns></returns>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.ForeignKey.Script">
            <summary>
            Generates a Transact-SQL script that can be used to re-create the SQL object.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.ForeignKey.Script(ApexSql.Diff.SqlServer.ScriptingOptions)">
            <summary>
            Generates a Transact-SQL script that can be used to re-create/drop the SQL object.
            </summary>
            <param name="scriptingOptions">Scripting options.</param>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.ForeignKey.Columns">
            <summary>
            Represents a collection of Column objects. Each Column object represents a column included in the foreign key.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.ForeignKey.CreateDate">
            <summary>
            Gets the date and time when the foreign key was created.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.ForeignKey.DateLastModified">
            <summary>
            Gets the date and time when the foreign key was last modified.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.ForeignKey.DeleteAction">
            <summary>
            Gets the action taken when the primary key reference by a foreign key is deleted.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.ForeignKey.ExtendedProperties">
            <summary>
            Gets the extended properties of the object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.ForeignKey.ID">
            <summary>
            Gets the ID value that uniquely identifies the foreign key.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.ForeignKey.IsChecked">
            <summary>
            Gets the Boolean property value that specifies whether the foreign key constraint was enabled without checking existing rows.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.ForeignKey.IsEnabled">
            <summary>
            Gets the value that specifies whether the foreign key constraint is enabled.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.ForeignKey.IsSystemNamed">
            <summary>
            Gets the value that specifies whether the foreign key constraint was named automatically by MSSQL or named by the database object creator.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.ForeignKey.NotForReplication">
            <summary>
            Gets the value that specifies whether the foreign key constraint is available for replication or not.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.ForeignKey.Parent">
            <summary>
            Gets parent object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.ForeignKey.ReferencedTable">
            <summary>
            Gets the Table that contains the primary key referenced by the foreign key.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.ForeignKey.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.ForeignKey.UpdateAction">
            <summary>
            Gets the Boolean property value that specifies whether the foreign key supports cascading updates.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.Credential">
            <summary>
            The Credential object represents a Microsoft SQL Server credential.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Credential.Script">
            <summary>
            Generates a Transact-SQL script that can be used to re-create the SQL Server credential
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Credential.Script(ApexSql.Diff.SqlServer.ScriptingOptions)">
            <summary>
            Generates a Transact-SQL script that can be used to re-create/drop the SQL object.
            </summary>
            <param name="scriptingOptions">Scripting options.</param>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Credential.CreateDate">
            <summary>
            Gets the date and time when the credential was created.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Credential.DateLastModified">
            <summary>
            Gets the date and time that the credential was last modified.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Credential.ID">
            <summary>
            Gets the ID value that uniquely identifies the object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Credential.Identity">
            <summary>
            Gets the identity associated with the credential.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Credential.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Credential.ProviderName">
            <summary>
            Gets the provider name for credential.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.Broker.MessageTypeCollection">
            <summary>
            Collection of MessageType objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.ErrorStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ErrorStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ErrorStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ErrorStrings.CannotSaveToSpecifiedFile">
            <summary>
              Looks up a localized string similar to Cannot save {0} to specified file [{1}].
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ErrorStrings.OwnerMapping_CannotMapOwnerBecauseAlreadyMapped">
            <summary>
              Looks up a localized string similar to Cannot map owner [{0}] because it already mapped.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ErrorStrings.OwnerMapping_CannotMapOwnerOntoItself">
            <summary>
              Looks up a localized string similar to Cannot map owner [{0}] onto itself.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ErrorStrings.OwnerMapping_OwnerMappingProfileHasIncorrectFormat">
            <summary>
              Looks up a localized string similar to Owner mapping profile has incorrect format.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ErrorStrings.OwnerMapping_OwnerMappingProfileIsBad">
            <summary>
              Looks up a localized string similar to Owner mapping profile is bad.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ErrorStrings.UsingUnlicensedVersion">
            <summary>
              Looks up a localized string similar to This application references an unlicensed version of the ApexSQL Diff API.{0}Please contact sales@apexsql.com for information on licensing this component..
            </summary>
        </member>
        <member name="T:ApexSql.Diff.ProgressAdapter">
            <summary>
            Progress Info adapter (marshall call to Common.UI.IProgressInfo to API.IProgressInfo
            Allow to have one object and change current IProgressInfo callback through set of <seealso cref="P:ApexSql.Diff.ProgressAdapter.ProgressInfo"/>ProgressInfo interface
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ProgressAdapter.ProgressInfo">
            <summary>
            Interface to which progress info will be translated
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.XmlSchemaCollection">
            <summary>
            The XmlSchemaCollection object represents a collection of XML namespaces. The collection of XML namespaces behave a composite object though the namespaces can be enumerated within the collection.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.SchemaSqlObject">
            <summary>
            Base class for schema scoped objects.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.SchemaSqlObject.Owner">
            <summary>
            Gets the owner of the database object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.SchemaSqlObject.Schema">
            <summary>
            Gets the schema (the ownership context) of the object.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.XmlSchemaCollection.Script">
            <summary>
            Generates a Transact-SQL script that can be used to re-create the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.XmlSchemaCollection.Script(ApexSql.Diff.SqlServer.ScriptingOptions)">
            <summary>
            Generates a Transact-SQL script that can be used to re-create/drop the SQL object.
            </summary>
            <param name="scriptingOptions">Scripting options.</param>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.XmlSchemaCollection.CreateDate">
            <summary>
            Gets the date and time when the XML schema collection was created.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.XmlSchemaCollection.DateLastModified">
            <summary>
            Gets the date and time when the XML schema collection was last modified.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.XmlSchemaCollection.ExtendedProperties">
            <summary>
            Gets the extended properties of the object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.XmlSchemaCollection.ID">
            <summary>
            Gets the ID value that uniquely identifies the object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.XmlSchemaCollection.Parent">
            <summary>
            Gets the Database object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.XmlSchemaCollection.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.XmlSchemaCollection.Text">
            <summary>
            Gets the text that defines all of the schemas in the XML schema collection.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.XmlSchemaCollection.Owner">
            <summary>
            Gets the owner of the database object.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.TriggerCollection">
            <summary>
            Collection of Trigger objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.Statistic">
            <summary>
            The Statistic class represents a Microsoft SQL Server statistic counter. 
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Statistic.Script">
            <summary>
            Generates a Transact-SQL script that can be used to re-create the SQL object.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Statistic.Script(ApexSql.Diff.SqlServer.ScriptingOptions)">
            <summary>
            Generates a Transact-SQL script that can be used to re-create/drop the SQL object.
            </summary>
            <param name="scriptingOptions">Scripting options.</param>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Statistic.FileGroup">
            <summary>
            Gets the file group where the statistic counter is stored.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Statistic.ID">
            <summary>
            Gets the ID value that uniquely identifies the statistic counter.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Statistic.IsAutoCreated">
            <summary>
            Gets the Boolean property value that specifies whether the statistic counter is automatically created.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Statistic.IsFromIndexCreation">
            <summary>
            Gets the Boolean property value that specifies whether the statistic counter was generated from the creation of an index.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Statistic.LastUpdated">
            <summary>
            Gets the date and time when the statistic counter was last updated.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Statistic.NoAutomaticRecomputation">
            <summary>
            Gets the Boolean property value that specifies whether the statistics counter recomputed automatically.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Statistic.Parent">
            <summary>
            Gets the TableViewBase object that is the parent of the Statistic object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Statistic.StatisticColumns">
            <summary>
            Represents a collection of StatisticColumn objects. Each StatisticColumn object represents a column defined on the statistic counter.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Statistic.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.PartitionFunctionCollection">
            <summary>
            Collection of PartitionFunction objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.ExecutionContext">
            <summary>
            The ExecutionContext enumeration is a list of constant values that specify the different types of context (or which role is assumed) when executing a process represented by an object.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ExecutionContext.Caller">
            <summary>
            The process is executed in the context of the process that called the referenced process.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ExecutionContext.ExecuteAsUser">
            <summary>
            The process is executed as a specific user.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ExecutionContext.Owner">
            <summary>
            The process is executed as the owner of the referenced object.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ExecutionContext.Self">
            <summary>
            The process is executed in the context of the referenced object.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.EventNotification">
            <summary>
            The EventNotification object provides programmatic access to event notifications.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.EventNotification.Script">
            <summary>
            Generates a Transact-SQL script that can be used to re-create the SQL object.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.EventNotification.Script(ApexSql.Diff.SqlServer.ScriptingOptions)">
            <summary>
            Generates a Transact-SQL script that can be used to re-create/drop the SQL object.
            </summary>
            <param name="scriptingOptions">Scripting options.</param>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.EventNotification.BrokerInstance">
            <summary>
            Gets a service broker instance against which broker service is resolved. 
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.EventNotification.CreateDate">
            <summary>
            Gets the date and time when the event notification was created. 
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.EventNotification.DateLastModified">
            <summary>
            Gets the date and time when the event notification was last modified. 
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.EventNotification.Events">
            <summary>
            Gets the event types that causes the event notification to execute.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.EventNotification.ExtendedProperties">
            <summary>
            Represents a collection of ExtendedProperty objects. Each ExtendedProperty object represents an extended property for the EventNotification object. 
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.EventNotification.ID">
            <summary>
            Gets the ID value that uniquely identifies the EventNotification.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.EventNotification.Parent">
            <summary>
            Gets the NamedSqlObject object that is the parent of the EventNotification object. 
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.EventNotification.Service">
            <summary>
            Gets the target service that receives the event instance data.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.EventNotification.WithFanIn">
            <summary>
            Gets a Boolean value that indicates whether SQL Server sends only one message per event. 
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.EventNotification.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.Broker.ServiceQueue">
            <summary>
            The ServiceQueue object represents a queue that stores messages and after they are received. 
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Broker.ServiceQueue.Script">
            <summary>
            Generates a Transact-SQL script that can be used to re-create the SQL object.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Broker.ServiceQueue.Script(ApexSql.Diff.SqlServer.ScriptingOptions)">
            <summary>
            Generates a Transact-SQL script that can be used to re-create/drop the SQL object.
            </summary>
            <param name="scriptingOptions">Scripting options.</param>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceQueue.ActivationExecutionContext">
            <summary>
            Gets the execution context for the activated procedure.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceQueue.CreateDate">
            <summary>
            Gets the date and time when the service queue was created.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceQueue.DateLastModified">
            <summary>
            Gets the date and time when the service queue was last modified.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceQueue.ExecutionContextPrincipal">
            <summary>
            Gets the server principal for the activated procedure
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceQueue.FileGroup">
            <summary>
            Gets the filegroup on which the service queue is located.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceQueue.IsActivationEnabled">
            <summary>
            Gets the Boolean property that specifies whether activation is enabled for the service queue.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceQueue.IsEnqueueEnabled">
            <summary>
            Gets the Boolean property that specifies whether the queue is enabled.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceQueue.IsRetentionEnabled">
            <summary>
            Gets the Boolean property that specifies whether the retention is enabled for the service queue.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceQueue.MaxReaders">
            <summary>
            Gets the maximum number of concurrent queue readers.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceQueue.ProcedureDatabase">
            <summary>
            Gets the database that contains the executing procedure.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceQueue.ProcedureName">
            <summary>
            Gets the name that contains the executing procedure.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceQueue.ProcedureSchema">
            <summary>
            Gets the schema that contains the executing procedure.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceQueue.RowCount">
            <summary>
            Gets the number of rows in the service queue.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceQueue.RowCountAsDouble">
            <summary>
            Gets the number of rows in the service queue as a double floating point value.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceQueue.Owner">
            <summary>
            Gets the owner of the object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceQueue.ExtendedProperties">
            <summary>
            Gets the extended properties of the service queue.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceQueue.ID">
            <summary>
            Gets the ID value that uniquely identifies the object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceQueue.Parent">
            <summary>
            Gets the Database object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceQueue.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.Broker.MessageTypeValidation">
            <summary>
            The MessageTypeValidation enumeration contains constant values that specify the types of validation performed on the Service Broker message body.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.Broker.MessageTypeValidation.Empty">
            <summary>
            The message body must be NULL for this message type.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.Broker.MessageTypeValidation.None">
            <summary>
            Validation is not performed.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.Broker.MessageTypeValidation.Xml">
            <summary>
            The message body must contain well-formed XML data.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.Broker.MessageTypeValidation.XmlSchemaCollection">
            <summary>
            The message body must contain XML that passes validation by the XML schema collection specified for the message type. 
            </summary>
        </member>
        <member name="T:ApexSql.Diff.QualifiedNameParser">
            <summary>
            Extracts schema name and object name from qualified name.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.QualifiedNameParser.Reset">
            <summary>
            Resets parser to initial state.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.QualifiedNameParser.Parse(System.String)">
            <summary>
            Parses qualified name.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.QualifiedNameParser.SchemaName">
            <summary>
            Gets the name of schema.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.QualifiedNameParser.ObjectName">
            <summary>
            Gets the name of object.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.UserCollection">
            <summary>
            Collection of User objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.Broker.BrokerObjectBase">
            <summary>
            The BrokerObjectBase class is a base class that is inherited by other Service Broker classes.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Data.ComparedDataObject`1">
            <summary>
            A compared data object
            </summary>
        </member>
        <member name="F:ApexSql.Diff.Data.ComparedDataObject`1.dataObject">
            <summary>Catalog of data objects</summary>
        </member>
        <member name="F:ApexSql.Diff.Data.ComparedDataObject`1.dataCatalog">
            <summary>Data catalog</summary>
        </member>
        <member name="P:ApexSql.Diff.Data.ComparedDataObject`1.ObjectType">
            <summary>
            The <see cref="P:ApexSql.Diff.Data.ComparedDataObject`1.ObjectType">type</see> of the object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.ComparedDataObject`1.SourceName">
            <summary>
            The name of the source object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.ComparedDataObject`1.SourceOwner">
            <summary>
            The owner of the source object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.ComparedDataObject`1.DestinationName">
            <summary>
            The name of the destination object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.ComparedDataObject`1.DestinationOwner">
            <summary>
            The owner of the destination object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.ComparedDataObject`1.SourceRowCount">
            <summary>
            The count of rows in the source object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.ComparedDataObject`1.DestinationRowCount">
            <summary>
            The count of rows in the destination object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.ComparedDataObject`1.SourceObject">
            <summary>
            Gets source object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.ComparedDataObject`1.DestinationObject">
            <summary>
            Gets destination object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.ComparedDataObject`1.IsDifferent">
            <summary>
            Are source object and destination object different
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.ComparedDataObject`1.IsIdentical">
            <summary>
            Are source object and destination object identical
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.ComparedDataObject`1.IncludeInSynchronization">
            <summary>
            Include the object in synchronization
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.ComparedDataObject`1.IdenticalRows">
            <summary>
            A collection of identical rows
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.ComparedDataObject`1.DifferentRows">
            <summary>
            A collection of different rows
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.ComparedDataObject`1.AdditionalRows">
            <summary>
            A collection of source only rows
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.ComparedDataObject`1.MissingRows">
            <summary>
            A collection of destination only rows
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.HtmlReportOptions">
            <summary>
            Options used when generating html report
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Structure.HtmlReportOptions.#ctor(ApexSql.Diff.Common.DiffProject)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.HtmlReportOptions.IncludeDifferentObjects">
            <summary>Include different objects</summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.HtmlReportOptions.IncludeIdenticalObjects">
            <summary>Include identical objects</summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.HtmlReportOptions.IncludeAdditionalObjects">
            <summary>Include additional objects</summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.HtmlReportOptions.IncludeMissingObjects">
            <summary>Include missing objects</summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.HtmlReportOptions.IncludedInSynchronizationOnlyObjects">
            <summary>Include only objects included to synchronization</summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.HtmlReportOptions.IncludeComparisonResultsByObject">
            <summary>Include comparison result by object</summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.HtmlReportOptions.IncludeObjectsCompared">
            <summary>Include objects types compared</summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.HtmlReportOptions.IncludeComparisonOptions">
            <summary>Include options used when comparing</summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.HtmlReportOptions.IncludeReportOptions">
            <summary>Include options used when generating html report</summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.HtmlReportOptions.IncludeComparisonSummary">
            <summary>Include comparison summary</summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.HtmlReportOptions.IncludeDifferencesByObject">
            <summary>Include differences by object</summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.HtmlReportOptions.IncludeSummaryReport">
            <summary>Include summary report</summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.HtmlReportOptions.IncludeScripts">
            <summary>Include scripts for objects</summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.ComparedObject`1">
            <summary>
            A compared object
            </summary>
            <typeparam name="T">Parameter class</typeparam>
        </member>
        <member name="F:ApexSql.Diff.Structure.ComparedObject`1.co">
            <summary> Catalog object</summary>
        </member>
        <member name="F:ApexSql.Diff.Structure.ComparedObject`1.db1">
            <summary>Source database</summary>
        </member>
        <member name="F:ApexSql.Diff.Structure.ComparedObject`1.db2">
            <summary> Destination database</summary>
        </member>
        <member name="M:ApexSql.Diff.Structure.ComparedObject`1.#ctor(ApexSql.Diff.Engine.Db.CatalogObjects.CatalogObject,ApexSql.Diff.SqlServer.Database,ApexSql.Diff.SqlServer.Database,ApexSql.Diff.ResetSynchronizationResult)">
            <summary>
            Constructor
            </summary>
            <param name="co">The catalog object</param>
            <param name="db1">The source data source</param>
            <param name="db2">The destination data source</param>
            <param name="onResetSynchronizationResult">The delegate to reset synchronization result</param>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparedObject`1.ObjectType">
            <summary>
            Returns the <see cref="P:ApexSql.Diff.Structure.ComparedObject`1.ObjectType">type</see> of the object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparedObject`1.SourceObject">
            <summary>
            The source object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparedObject`1.DestinationObject">
            <summary>
            The destination object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparedObject`1.SourceName">
            <summary>
            The name of the source object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparedObject`1.SourceOwner">
            <summary>
            The owner of the source object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparedObject`1.DestinationName">
            <summary>
            The name of the destination object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparedObject`1.DestinationOwner">
            <summary>
            The owner of the destination object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparedObject`1.IsAdditionalObject">
            <summary>
            Is object in the source data source only
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparedObject`1.IsMissingObject">
            <summary>
            Is object in the destination data source only
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparedObject`1.IsIdentical">
            <summary>
            Indicates whether objects exist both in source and destination and whether they are identical
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparedObject`1.IsDifferent">
            <summary>
            Indicates whether objects exist both in source and destination data sources and whether they are different
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparedObject`1.IncludeInSynchronization">
            <summary>
            Include the object in synchronization
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.StatisticColumnCollection">
            <summary>
            Collection of StatisticColumn objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.ColumnCollection">
            <summary>
            Collection of Column objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.Broker.ServiceRoute">
            <summary>
            The ServiceRoute object represents a Service Broker route that contains the location information for the service and the database on which it is defined.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Broker.ServiceRoute.Script">
            <summary>
            Generates a Transact-SQL script that can be used to re-create the SQL object.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Broker.ServiceRoute.Script(ApexSql.Diff.SqlServer.ScriptingOptions)">
            <summary>
            Generates a Transact-SQL script that can be used to re-create/drop the SQL object.
            </summary>
            <param name="scriptingOptions">Scripting options.</param>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceRoute.Owner">
            <summary>
            Gets the owner of the service route.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceRoute.ExtendedProperties">
            <summary>
            Gets the extended properties of the service route.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceRoute.ID">
            <summary>
            Gets the ID value that uniquely identifies the object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceRoute.Parent">
            <summary>
            Gets the Database object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceRoute.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceRoute.Address">
            <summary>
            Gets the connection string for the remote Service Broker instance addressed by the route.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceRoute.BrokerInstance">
            <summary>
            Gets or sets the Service Broker instance that hosts the remote service.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceRoute.ExpirationDate">
            <summary>
            Gets the date and time when the service route expires.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceRoute.MirrorAddress">
            <summary>
            Gets the connection string of the remote mirrored Service Broker instance addressed by this route.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceRoute.RemoteService">
            <summary>
            Gets the remote service addressed by the service route.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.Broker.RemoteServiceBindingCollection">
            <summary>
            Collection of RemoteServiceBinding objects.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ServerOptions.DISABLE_DEF_CNST_CHK">
             <summary>
            DISABLE_DEF_CNST_CHK
             </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ServerOptions.IMPLICIT_TRANSACTIONS">
            <summary>
            IMPLICIT_TRANSACTIONS
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ServerOptions.CURSOR_CLOSE_ON_COMMIT">
            <summary>
            CURSOR_CLOSE_ON_COMMIT
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ServerOptions.ANSI_WARNINGS">
            <summary>
            ANSI_WARNINGS
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ServerOptions.ANSI_PADDING">
            <summary>
            ANSI_PADDING
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ServerOptions.ANSI_NULLS">
            <summary>
            ANSI_NULLS
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ServerOptions.ARITHABORT">
            <summary>
            ARITHABORT
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ServerOptions.ARITHIGNORE">
            <summary>
            ARITHIGNORE
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ServerOptions.QUOTED_IDENTIFIER">
            <summary>
            QUOTED_IDENTIFIER
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ServerOptions.NOCOUNT">
            <summary>
            NOCOUNT
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ServerOptions.ANSI_NULL_DFLT_ON">
            <summary>
            ANSI_NULL_DFLT_ON
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ServerOptions.ANSI_NULL_DFLT_OFF">
            <summary>
            ANSI_NULL_DFLT_OFF
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ServerOptions.CONCAT_NULL_YIELDS_NULL">
            <summary>
            CONCAT_NULL_YIELDS_NULL
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ServerOptions.NUMERIC_ROUNDABORT">
            <summary>
            NUMERIC_ROUNDABORT
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ServerOptions.XACT_ABORT">
            <summary>
            XACT_ABORT
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.Server">
            <summary>
            A SQL server information
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Server.#ctor(ApexSql.Diff.ConnectionProperties)">
            <summary>
            Constructs a SqlServerInfo
            </summary>
            <param name="connectionProperties">The server connection properties</param>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Server.Connect">
            <summary>
            Connect to sql server
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Server.Connect(ApexSql.Diff.ConnectionProperties)">
            <summary>
            Connect to sql server
            </summary>
            <param name="connection">Connection properties</param>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Server.Databases">
            <summary>
            A collection of databases
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Server.AnsiNullsOn">
            <summary>
            Is ANSI_NULL_DEFAULT set to ON
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Server.BatchDelimiter">
            <summary>
            The delimiter used to split batches
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Server.IsCaseSensitive">
            <summary>
            Is case sensitive on
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Server.IsFullTextInstalled">
            <summary>
            Is full text service installed
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Server.Name">
            <summary>
            The name of the server
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Server.QualifiedName">
            <summary>
            Gets the fully qualified name of server.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Server.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Server.QuotedIdentifierOn">
            <summary>
            Is quoted identifier on
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Server.Version">
            <summary>
            The version of the SQL server
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Server.ConnectionProperties">
            <summary>
            The connection properties
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.SqlServerVersion">
            <summary>
            A SQL Server version
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.SqlServerVersion.ToString">
            <summary>
            Returns string representation of the object
            </summary>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.SqlServerVersion.BuildNumber">
            <summary>
            The build number
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.SqlServerVersion.MajorVersion">
            <summary>
            The major version
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.SqlServerVersion.MinorVersion">
            <summary>
            The minor version
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.SqlServerVersion.Version">
            <summary>
            The version
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.WarningPriority">
            <summary>
            A warning priority
            </summary>
        </member>
        <member name="F:ApexSql.Diff.Structure.WarningPriority.Low">
            <summary>
            Low
            </summary>
        </member>
        <member name="F:ApexSql.Diff.Structure.WarningPriority.Medium">
            <summary>
            Medium
            </summary>
        </member>
        <member name="F:ApexSql.Diff.Structure.WarningPriority.High">
            <summary>
            High
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.Warning">
            <summary>
            A warning
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.Warning.StructureObject">
            <summary>
            The structure object on which warning generated
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.Warning.Priority">
            <summary>
            The warning priority
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.Warning.MessageType">
            <summary>
            The message type
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.Warning.Text">
            <summary>
            The warning text
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.WarningCollection">
            <summary>
            A collection of warnings
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Structure.WarningCollection.System#Collections#Generic#IEnumerable{ApexSql#Diff#Structure#Warning}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:ApexSql.Diff.Structure.WarningCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:ApexSql.Diff.Structure.WarningCollection.Item(System.Int32)">
            <summary>
            Returns a warning
            </summary>
            <param name="index">The zero-based index of the warning to get</param>
            <returns>The warning at the specified index, otherwise - null</returns>
        </member>
        <member name="P:ApexSql.Diff.Structure.WarningCollection.Count">
            <summary>
            The count of elements
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.ScriptingOptions">
            <summary>
            Options used to create script
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.CreateDropScript">
            <summary>
            Create DROP script instead of CREATE script
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.IgnoreAnsiOptions">
            <summary>
            Ignore ANSI options
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.IgnoreBoundRulesAndDefaults">
            <summary>
            Ignore bound default and rules
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.IgnoreCaseInBodies">
            <summary>
            Ignore case in bodies
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.IgnoreCaseInNames">
            <summary>
            Ignore case in names
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.IgnoreCheckAndDefaultConstraints">
            <summary>
            Ignore check and default constraints
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.IgnoreCollations">
            <summary>
            Ignore collations
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.IgnoreCommentsInBodies">
            <summary>
            Ignore comments in bodies
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.IgnoreConstraintNames">
            <summary>
            Ignore constraint names
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.IgnoreDmlTriggersOrder">
            <summary>
            Ignore the order (i.e. FIRST INSERT, LAST UPDATE) for DML triggers
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.IgnoreExtendedProperties">
            <summary>
            Ignore extended properties
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.IgnoreDataspaces">
            <summary>
            Ignore data spaces
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.IgnoreIndexFillfactorAttribute">
            <summary>
            Ignore FILLFACTOR property of indexes, primary keys and unique constraints
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.IgnoreForeignKeys">
            <summary>
            Ignore foreign keys
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.IgnoreForeignKeysActions">
            <summary>
            Ignore ON DELETE and ON UDATE actions defined on foreign keys
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.IgnoreFullTextIndexes">
            <summary>
            Ignore full text indexes
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.IgnoreColumnIdentityAttribute">
            <summary>
            Ignore identity property on columns
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.IgnoreIdentitySeedAndIncrement">
            <summary>
            Ignore identity seed and increment values
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.IgnoreIndexes">
            <summary>
            Ignore indexes
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.IgnoreIndexNames">
            <summary>
            Ignore name of indexes
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.IgnoreIndexLockAttributes">
            <summary>
            Ignore index PAGE LOCK and ROW LOCK properties
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.IgnoreConstraintNotForReplicationAttribute">
            <summary>
            Ignore NOT FOR REPLICATION argument on constraints
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.IgnorePermissions">
            <summary>
            Ignore permissions
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.IgnorePrimaryKeys">
            <summary>
            Ignore primary keys
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.IgnoreIndexSecondaryAttributes">
            <summary>
            Ignore secondary attributes
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.IgnoreSpacesInBodies">
            <summary>
            Ignore white space in bodies
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.IgnoreStatistics">
            <summary>
            Ignore statistics
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.IgnoreUniqueConstraints">
            <summary>
            Ignore uniques
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.IgnoreUserDefinedDataTypes">
            <summary>
            Ignore user defined data types
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.IgnoreConstraintWithNoCheckAttribute">
            <summary>
            Ignore the WITH NOCHECK argument on constraints. Disabled constraints are not ignored
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.IncludeComments">
            <summary>
            Suppress comments
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.IncludePrintStatements">
            <summary>
            Suppress print statements
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.CheckForObjectExistence">
            <summary>
            Check object existence before create/drop it
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.Current">
            <summary>
            Use current project options to script the object
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ScriptingOptions.Default">
            <summary>
            Default scripting options
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.IndexedColumn">
            <summary>
            The IndexedColumn object represents a Microsoft SQL Server column that is participating in an index.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.IndexedColumn.Name">
            <summary>
            Object name accessor.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.IndexedColumn.QualifiedName">
            <summary>
            Gets the fully qualified name of object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.IndexedColumn.Descending">
            <summary>
            Gets the Boolean property value that specifies whether the indexed column is sorted in descending or ascending order.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.IndexedColumn.ID">
            <summary>
            Gets the ID value that uniquely identifies the indexed column.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.IndexedColumn.IsComputed">
            <summary>
            Gets the Boolean property value that specifies whether the indexed column is computed or not.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.IndexedColumn.IsIncluded">
            <summary>
            Gets the Boolean property value that specifies whether the column is included in the index.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.IndexedColumn.Parent">
            <summary>
            Gets the Index object that is the parent of the IndexColumn object.
            </summary> 
        </member>
        <member name="P:ApexSql.Diff.SqlServer.IndexedColumn.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.ForeignKeyColumnCollection">
            <summary>
            Collection of ForeignKeyColumn objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.ForeignKeyColumn">
            <summary>
            Represents a collection of Column objects. Each Column object represents a column included in the foreign key.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.ForeignKeyColumn.Name">
            <summary>
            Object name accessor.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.ForeignKeyColumn.QualifiedName">
            <summary>
            Gets the fully qualified name of object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.ForeignKeyColumn.ID">
            <summary>
            Gets the foreign key column ID value.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.ForeignKeyColumn.Parent">
            <summary>
            Gets the ForeignKey object that is the parent of the ForeignKeyColumn object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.ForeignKeyColumn.ReferencedColumn">
            <summary>
            Gets the referenced column.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.ForeignKeyColumn.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.DefaultCollection">
            <summary>
            Collection of Default objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.DatabaseDdlTriggerCollection">
            <summary>
            Collection of DatabaseDdlTrigger objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Data.MappedColumn">
            <summary>
            A mapped data column
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Data.MappedColumn.Unmap">
            <summary>
            Unmap mapped column
            </summary>
            <returns>True if column has been unmapped</returns>
        </member>
        <member name="P:ApexSql.Diff.Data.MappedColumn.SourceName">
            <summary>
            The name of the column in the source object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.MappedColumn.DestinationName">
            <summary>
            The name of the column in the destination object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.MappedColumn.SourceColumn">
            <summary>
            Gets source column
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.MappedColumn.DestinationColumn">
            <summary>
            Gets destination column
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.MappedColumn.IncludeInComparison">
            <summary>
            Is column included in comparison
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Data.ComparedDataObjectCollection`1">
            <summary>
            A collection of compared data objects
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Data.ComparedDataObjectCollectionBase`1">
            <summary>
            A collection of compared objects
            </summary>
            <typeparam name="T">An type of elements in a collection</typeparam>
        </member>
        <member name="F:ApexSql.Diff.Data.ComparedDataObjectCollectionBase`1.comparedObjects">
            <summary> collection of compared objects</summary>
        </member>
        <member name="F:ApexSql.Diff.Data.ComparedDataObjectCollectionBase`1.project">
            <summary> project</summary>
        </member>
        <member name="M:ApexSql.Diff.Data.ComparedDataObjectCollectionBase`1.CreateObject(ApexSql.DataDiff.Engine.Model.IMatchedObject)">
            <summary>Create object from IMatchedObject</summary>
        </member>
        <member name="M:ApexSql.Diff.Data.ComparedDataObjectCollectionBase`1.IncludeAllInSynchronization">
            <summary>
            Include all objects in this collection to synchronization
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Data.ComparedDataObjectCollectionBase`1.ExcludeAllFromSynchronization">
            <summary>
            Exclude all objects in this collection from synchronization
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Data.ComparedDataObjectCollectionBase`1.IncludeInSynchronization(System.String[])">
            <summary>
            Include this collection's objects matching to at least one regular expression from the list to synchronization
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Data.ComparedDataObjectCollectionBase`1.ExcludeFromSynchronization(System.String[])">
            <summary>
            Exclude this collection's objects matching from at least one regular expression from the list from synchronization
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Data.ComparedDataObjectCollectionBase`1.GetItemBySourceName(System.String)">
            <summary>
            Search the compared object by the source object's fully qualified name
            </summary>
            <param name="fullyQualifiedName">Fully qualified name of the object</param>
            <returns>Found compared object otherwise, otherwise null</returns>
        </member>
        <member name="M:ApexSql.Diff.Data.ComparedDataObjectCollectionBase`1.GetItemByDestinationName(System.String)">
            <summary>
            Search the compared object by the destination object's fully qualified name
            </summary>
            <param name="fullyQualifiedName">Fully qualified name of the object</param>
            <returns>Found compared object otherwise, otherwise null</returns>
        </member>
        <member name="M:ApexSql.Diff.Data.ComparedDataObjectCollectionBase`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:ApexSql.Diff.Data.ComparedDataObjectCollectionBase`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:ApexSql.Diff.Data.ComparedDataObjectCollectionBase`1.Count">
            <summary>
            Count of compared objects
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.ComparedDataObjectCollectionBase`1.CountDifferent">
            <summary>
            Count of different objects
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.ComparedDataObjectCollectionBase`1.CountIdentical">
            <summary>
            Count of identical objects
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.ComparedDataObjectCollectionBase`1.CountSourceOnly">
            <summary>
            Count of the source objects only
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.ComparedDataObjectCollectionBase`1.CountDestinationOnly">
            <summary>
            Count of the destination objects only
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.ComparedDataObjectCollectionBase`1.CountToSynchronize">
            <summary>
            Count of objects to synchronize
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.ComparedDataObjectCollectionBase`1.Item(System.Int32)">
            <summary>
            Returns a compared object
            </summary>
            <param name="index">The zero-based index of the element to get</param>
            <returns>The compared object at the specified index, otherwise - null</returns>
        </member>
        <member name="M:ApexSql.Diff.Data.ComparedDataObjectCollection`1.CreateObject(ApexSql.DataDiff.Engine.Model.IMatchedObject)">
            <summary>Create object from IMatchedObject</summary>
        </member>
        <member name="P:ApexSql.Diff.Data.ComparedDataObjectCollection`1.Count">
            <summary>
            The count of elements
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Data.DataCsvOptions">
            <summary>
            Options used when creating CSV report
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Data.DataCsvOptions.#ctor(ApexSql.DataDiff.Common.DiffProject)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataCsvOptions.IncludeDifferentObjects">
            <summary>Include different objects</summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataCsvOptions.IncludeIdenticalObjects">
            <summary>Include identical objects</summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataCsvOptions.IncludedInSynchronizationOnly">
            <summary>Only include in report objects included in synchronization</summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataCsvOptions.IncludeDifferentRows">
            <summary>Include different rows</summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataCsvOptions.IncludeIdenticalRows">
            <summary>Include identical rows</summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataCsvOptions.IncludeAdditionalRows">
            <summary>Include additional rows</summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataCsvOptions.IncludeMissingRows">
            <summary>Include missing rows</summary>
        </member>
        <member name="T:ApexSql.Diff.Data.DataHtmlOptions">
            <summary>
            Options used when creating HTML report
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Data.DataHtmlOptions.#ctor(ApexSql.DataDiff.Common.DiffProject)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataHtmlOptions.IncludeDifferentObjects">
            <summary>Include different objects</summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataHtmlOptions.IncludeIdenticalObjects">
            <summary>Include identical objects</summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataHtmlOptions.IncludedInSynchronizationOnly">
            <summary>Only include in report objects included in synchronization</summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataHtmlOptions.IncludeComparisonOptions">
            <summary>Include comparison options</summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataHtmlOptions.IncludeReportOptions">
            <summary>Include options used when creating report</summary>
        </member>
        <member name="T:ApexSql.Diff.ConnectionProperties">
            <summary>
            A connection properties used to connect to a SQL Server database
            </summary>
        </member>
        <member name="M:ApexSql.Diff.ConnectionProperties.ResetConnection">
            <summary>
            Resets connection
            </summary>
        </member>
        <member name="M:ApexSql.Diff.ConnectionProperties.#ctor(System.String,System.String)">
            <summary>
            Constructs ConnectionProperties object
            </summary>
            <param name="serverName">Server name</param>
            <param name="dbName">Database name</param>
        </member>
        <member name="M:ApexSql.Diff.ConnectionProperties.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructs ConnectionProperties object
            </summary>
            <param name="serverName">Server name</param>
            <param name="dbName">Database name</param>
            <param name="userName">Login</param>
            <param name="password">Password</param>
        </member>
        <member name="M:ApexSql.Diff.ConnectionProperties.#ctor">
            <summary>
            Constructs ConnectionProperties object
            </summary>
        </member>
        <member name="M:ApexSql.Diff.ConnectionProperties.ToString">
            <summary>
            Returns a String that represents the current Object
            </summary>
            <returns>String that represents the current Object</returns>
        </member>
        <member name="P:ApexSql.Diff.ConnectionProperties.ServerName">
            <summary>
             The name of the server to connect to
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ConnectionProperties.DatabaseName">
            <summary>
             The name of the database to connect to
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ConnectionProperties.TrustedConnection">
            <summary>
             Is windows authentication should be used to connect to database
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ConnectionProperties.StoreEncryptedPassword">
            <summary>
            Should be password stored when saving project
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ConnectionProperties.UserName">
            <summary>
             The user name to use when connecting
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ConnectionProperties.Password">
            <summary>
             The password to use when connecting
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ConnectionProperties.Timeout">
            <summary>
            The connection timeout when connecting
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ConnectionProperties.Pooled">
            <summary>
            Should pooling be used for this database
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ConnectionProperties.ApplicationName">
            <summary>
            The application name used to identify application when connecting to the SQL Server
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ConnectionProperties.ConnectionString">
            <summary>
            Connection string
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.XmlSchemaCollectionCollection">
            <summary>
            Collection of XmlSchemaCollection objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.Synonym">
            <summary>
            The Synonym object represents a Microsoft SQL Server synonym.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Synonym.Script">
            <summary>
            Generates a Transact-SQL script that can be used to re-create the SQL Server object
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Synonym.Script(ApexSql.Diff.SqlServer.ScriptingOptions)">
            <summary>
            Generates a Transact-SQL script that can be used to re-create/drop the SQL object.
            </summary>
            <param name="scriptingOptions">Scripting options.</param>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Synonym.BaseDatabase">
            <summary>
            Gets the base database on which the base object resides.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Synonym.BaseObject">
            <summary>
            Gets the base object for which the synonym is defined.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Synonym.BaseSchema">
            <summary>
            Gets the schema of the base object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Synonym.BaseServer">
            <summary>
            Gets the instance of Microsoft SQL Server on which the base object resides.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Synonym.DateLastModified">
            <summary>
            Gets the date and time when the synonym was last modified.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Synonym.CreateDate">
            <summary>
            Gets the date and time when the synonym was created.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Synonym.ID">
            <summary>
            Gets the ID value that uniquely identifies the synonym.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Synonym.ExtendedProperties">
            <summary>
            Gets the extended properties of the synonym.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Synonym.Owner">
            <summary>
            Gets the owner of the synonym.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Synonym.Parent">
            <summary>
            Gets the Database object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Synonym.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.Rule">
            <summary>
            Database rule.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.DefaultRuleBase">
            <summary>
            The DefaultRuleBase class is a base class that is inherited by the Rule class and the Default class. 
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.DefaultRuleBase.EnumBoundColumns">
            <summary>
            Enumerates a list of columns to which the default or rule is bound.
            </summary>
            <returns>An array of Column objects that specify the columns to which the default or rule is bound.</returns>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.DefaultRuleBase.EnumBoundDataTypes">
            <summary>
            Enumerates a list of data types to which the default or rule is bound.
            </summary>
            <returns>An array of UserDefinedDataType objects that specify the data types to which the default or rule is bound.</returns>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.DefaultRuleBase.Script">
            <summary>
            Generates a Transact-SQL script that can be used to re-create the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.DefaultRuleBase.Script(ApexSql.Diff.SqlServer.ScriptingOptions)">
            <summary>
            Generates a Transact-SQL script that can be used to re-create/drop the SQL object.
            </summary>
            <param name="scriptingOptions">Scripting options.</param>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DefaultRuleBase.ExtendedProperties">
            <summary>
            Gets the extended properties of the object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DefaultRuleBase.Parent">
            <summary>
            Gets the Database object.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Rule.EnumBoundColumns">
            <summary>
            Enumerates a list of columns to which the rule is bound.
            </summary>
            <returns>An array of Column objects that specify the columns to which the rule is bound.</returns>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Rule.EnumBoundDataTypes">
            <summary>
            Enumerates a list of data types to which the rule is bound.
            </summary>
            <returns>An array of UserDefinedDataType objects that specify the data types to which the rulw is bound.</returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Rule.CreateDate">
            <summary>
            Gets the date and time when the rule was created.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Rule.ID">
            <summary>
            Gets the ID value that uniquely identifies the object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Rule.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Rule.Owner">
            <summary>
            Gets the owner of the database object.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.Index">
            <summary>
            The Index object represents a Microsoft SQL Server index.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Index.Script">
            <summary>
            Generates a Transact-SQL script that can be used to re-create the SQL object.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Index.Script(ApexSql.Diff.SqlServer.ScriptingOptions)">
            <summary>
            Generates a Transact-SQL script that can be used to re-create/drop the SQL object.
            </summary>
            <param name="scriptingOptions">Scripting options.</param>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Index.CompactLargeObjects">
            <summary>
            Gets the Boolean property value that specifies whether to compact the large object (LOB) data in the index
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Index.DisallowPageLocks">
            <summary>
            Gets the Boolean property value that specifies whether the index allows page locks.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Index.DisallowRowLocks">
            <summary>
            Gets the Boolean property value that specifies whether the index allows row locks.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Index.ExtendedProperties">
            <summary>
            Gets the extended properties of the index.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Index.FileGroup">
            <summary>
            Index filegroup.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Index.FillFactor">
            <summary>
            Fill factor.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Index.ID">
            <summary>
            Gets the ID value that uniquely identifies the object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Index.IgnoreDuplicateKeys">
            <summary>
            Gets the Boolean property value that specifies whether the index ignores duplicate keys.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Index.IndexedColumns">
            <summary>
            Gets a collection of IndexedColumn objects that represent all the columns participating in the index.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Index.IndexKeyType">
            <summary>
            Gets the index key type.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Index.IsClustered">
            <summary>
            Gets the Boolean property value that specifies whether the index is clustered.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Index.IsDisabled">
            <summary>
            Gets the Boolean property value that specifies whether the index is disabled.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Index.IsFullTextKey">
            <summary>
            Gets the Boolean value that specifies whether the index is enabled for row identification in Microsoft Search.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Index.IsIndexOnComputed">
            <summary>
            Gets the Boolean property value that specifies whether the index is based on a computed column.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Index.IsIndexOnTable">
            <summary>
            Gets the Boolean property value that specifies whether the index is defined for a table or a view.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Index.IsPartitioned">
            <summary>
            Gets the Boolean property value that specifies whether the index is stored in a partitioned scheme.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Index.IsSystemNamed">
            <summary>
            Gets the Boolean property value that specifies whether the index was named automatically by the system.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Index.IsSystemObject">
            <summary>
            Gets the Boolean property value that specifies whether the index is a system object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Index.IsUnique">
            <summary>
            Is unique: Primary key, unique Constraint or unique Index.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Index.IsXmlIndex">
            <summary>
            Gets the Boolean property value that specifies whether the index is an XML index.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Index.MaximumDegreeOfParallelism">
            <summary>
            Gets the maximum number of processors that can be used when running a query that uses the index.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Index.NoAutomaticRecomputation">
            <summary>
            Gets the Boolean property value that specifies whether statistics are regenerated when an index is created.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Index.OnlineIndexOperation">
            <summary>
            Gets the Boolean property value that specifies whether the index will be kept online during index operations thus allowing access to the data.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Index.PadIndex">
            <summary>
            Gets the Boolean property value that specifies whether space is left open on each page of the intermediate levels of the index.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Index.Parent">
            <summary>
            Gets the parent object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Index.ParentXmlIndex">
            <summary>
            Gets the parent of an XML index.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Index.SecondaryXmlIndexType">
            <summary>
            Gets the secondary XML index type.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Index.SortInTempdb">
            <summary>
            Gets the Boolean property value that specifies whether the index is sorted using the tempdb database for intermediate storage of data.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Index.SpaceUsed">
            <summary>
            Gets the disk space used to store the index data in kilobytes.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Index.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Index.IsSpatialIndex">
            <summary>
            Gets the Boolean property value that specifies whether the index is spatial.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Index.SpatialIndexType">
            <summary>
            Gets the String property value that specifies spatial index type.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.FullTextIndexColumn">
            <summary>
            The FullTextIndexColumn object represents a Microsoft Search full-text index column.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FullTextIndexColumn.Name">
            <summary>
            Object name accessor.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FullTextIndexColumn.QualifiedName">
            <summary>
            Gets the fully qualified name of object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FullTextIndexColumn.Language">
            <summary>
            Gets the language used by the full-text index column.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FullTextIndexColumn.Parent">
            <summary>
            Gets the FullTextIndex object that is the parent of the FullTextIndexColumn object.
            </summary> 
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FullTextIndexColumn.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FullTextIndexColumn.TypeColumnName">
            <summary>
            Gets the name of a column in the table that stores the document type.
            </summary>  
        </member>
        <member name="T:ApexSql.Diff.SqlServer.Broker.RemoteServiceBinding">
            <summary>
            The RemoteServiceBinding object represents the settings that Service Broker uses for security and authentication when communicating with a remote service. 
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Broker.RemoteServiceBinding.Script">
            <summary>
            Generates a Transact-SQL script that can be used to re-create the SQL object.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Broker.RemoteServiceBinding.Script(ApexSql.Diff.SqlServer.ScriptingOptions)">
            <summary>
            Generates a Transact-SQL script that can be used to re-create/drop the SQL object.
            </summary>
            <param name="scriptingOptions">Scripting options.</param>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.RemoteServiceBinding.CertificateUser">
            <summary>
            Gets the user that holds the certificate associated with the remote service binding.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.RemoteServiceBinding.IsAnonymous">
            <summary>
            Gets the Boolean property that specifies whether anonymous dialogs are enabled.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.RemoteServiceBinding.RemoteService">
            <summary>
            Gets the remote service for which the RemoteServiceBinding object provides security credentials.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.RemoteServiceBinding.ExtendedProperties">
            <summary>
            Gets the extended properties of the object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.RemoteServiceBinding.ID">
            <summary>
            Gets the ID value that uniquely identifies the object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.RemoteServiceBinding.Parent">
            <summary>
            Gets the ServiceBroker object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.RemoteServiceBinding.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.RemoteServiceBinding.Owner">
            <summary>
            Gets the owner of the service contract.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.MappedObjectCollectionBase`1">
            <summary>
            A collection of mapped objects
            </summary>
            <typeparam name="T">An type of elements in a collection</typeparam>
        </member>
        <member name="F:ApexSql.Diff.MappedObjectCollectionBase`1.project">
            <summary> project </summary>
        </member>
        <member name="F:ApexSql.Diff.MappedObjectCollectionBase`1.pairedObjects">
            <summary>Collection of paired objects</summary>
        </member>
        <member name="M:ApexSql.Diff.MappedObjectCollectionBase`1.ResetComparedCollections">
            <summary>Resets compared collection</summary>
        </member>
        <member name="M:ApexSql.Diff.MappedObjectCollectionBase`1.IncludeAllInComparison">
            <summary>
            Include all objects in comparison
            </summary>
        </member>
        <member name="M:ApexSql.Diff.MappedObjectCollectionBase`1.ExcludeAllFromComparison">
            <summary>
            Exclude all objects from comparison
            </summary>
        </member>
        <member name="M:ApexSql.Diff.MappedObjectCollectionBase`1.IncludeInComparison(System.String[])">
            <summary>
            Include objects matching to at least one regular expression from the list in comparison
            </summary>
        </member>
        <member name="M:ApexSql.Diff.MappedObjectCollectionBase`1.ExcludeFromComparison(System.String[])">
            <summary>
            Exclude objects matching to at least one regular expression from the list from comparison
            </summary>
        </member>
        <member name="M:ApexSql.Diff.MappedObjectCollectionBase`1.CreateObject(System.Object)">
            <summary>Create object from IMatchedObject</summary>
        </member>
        <member name="M:ApexSql.Diff.MappedObjectCollectionBase`1.GetItemBySourceName(System.String)">
            <summary>
            Search an object in the collection by the source object's fully qualified name
            </summary>
            <param name="fullyQualifiedName">The fully qualified name of an object</param>
            <returns>The found compared object or null if an object was not found</returns>
        </member>
        <member name="M:ApexSql.Diff.MappedObjectCollectionBase`1.GetItemByDestinationName(System.String)">
            <summary>
            Search an object in the collection by the destination object's fully qualified name
            </summary>
            <param name="fullyQualifiedName">The fully qualified name of the object</param>
            <returns>The found object or null if the object was not found</returns>
        </member>
        <member name="M:ApexSql.Diff.MappedObjectCollectionBase`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:ApexSql.Diff.MappedObjectCollectionBase`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:ApexSql.Diff.MappedObjectCollectionBase`1.Count">
            <summary>
            The count of elements
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Data.MappedKey">
            <summary>
            A mapped key used to compare two mapped data objects
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Data.MappedKey.GetMappedKeyColumns">
            <summary>
            Collection of mapped columns in the key
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.MappedKey.SourceKeyName">
            <summary>
            Source key name
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.MappedKey.DestinationKeyName">
            <summary>
            Detination key name 
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.MappedKey.SourceKeyType">
            <summary>
            Source key type
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.MappedKey.DestinationKeyType">
            <summary>
            Destination key type
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Data.MappedDataObjectCollectionBase`1">
            <summary>
            A collection of mapped objects
            </summary>
            <typeparam name="T">An type of elements in a collection</typeparam>
        </member>
        <member name="F:ApexSql.Diff.Data.MappedDataObjectCollectionBase`1.project">
            <summary> project </summary>
        </member>
        <member name="F:ApexSql.Diff.Data.MappedDataObjectCollectionBase`1.pairedObjects">
            <summary>Collection of paired objects</summary>
        </member>
        <member name="M:ApexSql.Diff.Data.MappedDataObjectCollectionBase`1.ResetComparedCollections">
            <summary>Resets compared collection</summary>
        </member>
        <member name="M:ApexSql.Diff.Data.MappedDataObjectCollectionBase`1.IncludeAllInComparison">
            <summary>
            Include all objects in comparison
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Data.MappedDataObjectCollectionBase`1.ExcludeAllFromComparison">
            <summary>
            Exclude all objects from comparison
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Data.MappedDataObjectCollectionBase`1.IncludeInComparison(System.String[])">
            <summary>
            Include objects matching to at least one regular expression from the list in comparison
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Data.MappedDataObjectCollectionBase`1.ExcludeFromComparison(System.String[])">
            <summary>
            Exclude objects matching to at least one regular expression from the list from comparison
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Data.MappedDataObjectCollectionBase`1.CreateObject(ApexSql.DataDiff.Engine.Model.IMatchedObject)">
            <summary>Create object from IMatchedObject</summary>
        </member>
        <member name="M:ApexSql.Diff.Data.MappedDataObjectCollectionBase`1.GetItemBySourceName(System.String)">
            <summary>
            Search an object in the collection by the source object's fully qualified name
            </summary>
            <param name="fullyQualifiedName">The fully qualified name of an object</param>
            <returns>The found compared object or null if an object was not found</returns>
        </member>
        <member name="M:ApexSql.Diff.Data.MappedDataObjectCollectionBase`1.GetItemByDestinationName(System.String)">
            <summary>
            Search an object in the collection by the destination object's fully qualified name
            </summary>
            <param name="fullyQualifiedName">The fully qualified name of the object</param>
            <returns>The found object or null if the object was not found</returns>
        </member>
        <member name="M:ApexSql.Diff.Data.MappedDataObjectCollectionBase`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:ApexSql.Diff.Data.MappedDataObjectCollectionBase`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:ApexSql.Diff.Data.MappedDataObjectCollectionBase`1.Count">
            <summary>
            The count of elements
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.ComparisonOptions">
            <summary>
            Options used when comparing databases
            </summary>
        </member>
        <member name="T:ApexSql.Diff.ComparisonOptionsBase">
            <summary>
            The base class for options used when comparing databases
            </summary>
        </member>
        <member name="M:ApexSql.Diff.ComparisonOptionsBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ApexSql.Diff.ComparisonOptionsBase.ResetMappedCollections">
            <summary>
            Resets Mapped Collections
            </summary>
        </member>
        <member name="M:ApexSql.Diff.ComparisonOptionsBase.ResetComparedCollections">
            <summary>
            Resets Compared Collections
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ComparisonOptionsBase.Project">
            <summary>
            Core Project
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ComparisonOptionsBase.DataProject">
            <summary>
            Core Project
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ComparisonOptionsBase.ocg">
            <summary>
            Gets general options
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ComparisonOptionsBase.docg">
            <summary>
            Gets general options
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ComparisonOptionsBase.TreatListAsExclude">
            <summary>
            Treat list of objects as exclude list
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.IgnoreSystemObjects">
            <summary>
            Ignore system objects
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.IgnorePermissions">
            <summary>
            Ignore permissions
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.IgnoreAnsiOptions">
            <summary>
            Ignore ANSI options
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.IgnoreCaseInNames">
            <summary>
            Ignore case in names of objects
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.IgnoreExtendedProperties">
            <summary>
            Ignore extended properties
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.IgnoreCommentsInBodies">
            <summary>
            Ignore comments in bodies
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.IgnoreSpacesInBodies">
            <summary>
            Ignore white spaces in bodies
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.IgnoreCaseInBodies">
            <summary>
            Ignore case in bodies
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.IgnoreReplicationTriggers">
            <summary>
            Ignore replication triggers
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.IgnoreDmlTriggersOrder">
            <summary>
            Ignore the order (i.e. FIRST INSERT, LAST UPDATE) for DML triggers
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.IgnoreBoundRulesAndDefaults">
            <summary>
            Ignore bound rules and defaults
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.IgnoreCollations">
            <summary>
            Ignore collations
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.IgnoreColumnsOrder">
            <summary>
            Ignore columns order
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.IgnoreCheckAndDefaultConstraints">
            <summary>
            Ignore check and default constraints
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.IgnoreConstraintNames">
            <summary>
            Ignore constraint names
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.IgnoreDataspaces">
            <summary>
            Ignore data spaces
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.IgnoreForeignKeys">
            <summary>
            Ignore foreign keys
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.IgnoreFullTextIndexes">
            <summary>
            Ignore full text indexes
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.IgnoreIndexNames">
            <summary>
            Ignore name of indexes
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.IgnoreIndexes">
            <summary>
            Ignore indexes
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.IgnorePrimaryKeys">
            <summary>
            Ignore primary keys
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.IgnoreIndexSecondaryAttributes">
            <summary>
            Ignore index secondary attributes
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.IgnoreStatistics">
            <summary>
            Ignore statistics
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.IgnoreUniqueConstraints">
            <summary>
            Ignore unique constraints
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.IgnoreUserDefinedDataTypes">
            <summary>
            Ignore user defined data types
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.IgnoreIndexFillfactorAttribute">
            <summary>
            Ignore FILLFACTOR property of indexes, primary keys and unique constraints
            </summary>        
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.IgnoreIndexSortOrder">
            <summary>
            Ignore sort order of index columns
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.IgnoreIndexLockAttributes">
            <summary>
            Ignore index PAGE LOCK and ROW LOCK properties
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.IgnoreConstraintNotForReplicationAttribute">
            <summary>
            Ignore NOT FOR REPLICATION attribute on constraints
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.IgnoreConstraintWithNoCheckAttribute">
            <summary>
            Ignore the WITH NOCHECK argument on constraints. Disabled constraints are not ignored
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.IgnoreForeignKeysActions">
            <summary>
            Ignore ON DELETE and ON UPDATE actions defined on foreign keys
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.IgnoreIdentitySeedAndIncrement">
            <summary>
            Ignore identity seed and increment values
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.IgnoreColumnIdentityAttribute">
            <summary>
            Ignore column identity attribute
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.OwnerFilterType">
            <summary>
            An owner filter type
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.UseOwnerMapping">
            <summary>
            Use owner mapping
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.AssociateSimilarlyNamedColumns">
            <summary>
            Associate similarly named columns
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparisonOptions.DegreeOfSimilarity">
            <summary>
            Degree of names similarity to associate columns
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.OwnerFilterType">
            <summary>
            An owner fiter type for comparison
            </summary>
        </member>
        <member name="F:ApexSql.Diff.Structure.OwnerFilterType.CurrentOwner">
            <summary>
            Compare objects owned by currently connected user
            </summary>
        </member>
        <member name="F:ApexSql.Diff.Structure.OwnerFilterType.SelectedOwners">
            <summary>
            Compare objects owned by selected user
            </summary>
        </member>
        <member name="F:ApexSql.Diff.Structure.OwnerFilterType.AllOwners">
            <summary>
            Compare objects owned by any user
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.XmlDocumentConstraint">
            <summary>
            The XmlDocumentConstraint enumeration contains constant values that specify the constraints imposed on an XML data type
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.XmlDocumentConstraint.Default">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.XmlDocumentConstraint.Content">
            <summary>
            Specifies that each instance of the xml data type can contain multiple top-level elements.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.XmlDocumentConstraint.Document">
            <summary>
            Specifies that each instance of the xml data type can contain only one top-level element. 
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.User">
            <summary>
            The User object represents a Microsoft SQL Server database or application role.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.User.Script">
            <summary>
            Generates a Transact-SQL script that can be used to re-create the SQL object.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.User.Script(ApexSql.Diff.SqlServer.ScriptingOptions)">
            <summary>
            Generates a Transact-SQL script that can be used to re-create/drop the SQL object.
            </summary>
            <param name="scriptingOptions">Scripting options.</param>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.User.AsymmetricKey">
            <summary>
            Gets the asymmetric key for the user.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.User.Certificate">
            <summary>
            Gets the certificate for the user. 
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.User.CreateDate">
            <summary>
            Gets the date and time when the database user was created.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.User.DateLastModified">
            <summary>
            Gets the date and time when the database user was last modified.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.User.DefaultSchema">
            <summary>
            Gets the default schema for the database user.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.User.ExtendedProperties">
            <summary>
            Gets the extended properties of the user.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.User.HasDBAccess">
            <summary>
            Gets the Boolean property that specifies whether the database user has access to the database.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.User.ID">
            <summary>
            Gets the ID value that uniquely identifies the database user.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.User.IsSystemObject">
            <summary>
            Gets the Boolean property that specifies whether the database user is a system object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.User.Login">
            <summary>
            Gets the login that is associated with the database user.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.User.LoginType">
            <summary>
            Gets the type of login that is associated with the database user.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.User.Parent">
            <summary>
            Gets the Database object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.User.Sid">
            <summary>
            Gets the security identification number (SID) value of the database user.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.User.UserType">
            <summary>
            Gets the type of user
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.User.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.TableViewBase">
            <summary>
            Table and View base class.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.TableViewBase.Script">
            <summary>
            Generates a Transact-SQL script that can be used to re-create the SQL object.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.TableViewBase.Script(ApexSql.Diff.SqlServer.ScriptingOptions)">
            <summary>
            Generates a Transact-SQL script that can be used to re-create/drop the SQL object.
            </summary>
            <param name="scriptingOptions">Scripting options.</param>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.TableViewBase.Columns">
            <summary>
            Represents a collection of Column objects. Each Column object represents a column in the table (view).
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.TableViewBase.ExtendedProperties">
            <summary>
            Gets the extended properties of the table (view).
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.TableViewBase.FullTextIndex">
            <summary>
            Gets the full text index on the table or view.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.TableViewBase.Indexes">
            <summary>
            All constraints and indexes.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.TableViewBase.IsSystemObject">
            <summary>
            Gets the Boolean property value that specifies whether the table or view is a system object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.TableViewBase.Owner">
            <summary>
            Gets the owner of the database object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.TableViewBase.Parent">
            <summary>
            Gets the Database object that is the parent of the Table or View object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.TableViewBase.Statistics">
            <summary>
            Represents a collection of Statistic objects. Each Statistic object represents a statistic counter defined on the table or view.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.TableViewBase.Triggers">
            <summary>
            Represents a collection of Trigger objects. Each Trigger object represents a trigger defined on the table or view.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.TableCollection">
            <summary>
            Collection of Table objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.Table">
            <summary>
            The Table object represents a Microsoft SQL Server table.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Table.AnsiNullsStatus">
            <summary>
            Gets the Boolean property value that specifies whether SQL-92 NULL handling is enabled on the table.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Table.Checks">
            <summary>
            Represents a collection of Check objects. Each Check object represents a check constraint defined on the table.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Table.CreateDate">
            <summary>
            Gets the date and time when the table was created.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Table.DataSpaceUsed">
            <summary>
            Gets the storage space used by the rows of the referenced table in kilobytes.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Table.DateLastModified">
            <summary>
            Gets the date and time when the table was last modified.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Table.FileGroup">
            <summary>
            Gets the filegroup where the table is stored.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Table.ForeignKeys">
            <summary>
            Relationships (foreign keys).
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Table.HasAfterTrigger">
            <summary>
            Gets the Boolean property value that specifies whether the table has any after triggers.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Table.HasDeleteTrigger">
            <summary>
            Gets the Boolean property value that specifies whether the table has a delete trigger.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Table.HasIndex">
            <summary>
            Gets the Boolean property value that specifies whether the table has at least one index.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Table.HasInsertTrigger">
            <summary>
            Gets the Boolean property value that specifies whether the table has an insert trigger.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Table.HasInsteadOfTrigger">
            <summary>
            Gets the Boolean property value that specifies whether the table has any instead of triggers.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Table.HasUpdateTrigger">
            <summary>
            Gets the Boolean property value that specifies whether the table has an update trigger.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Table.ID">
            <summary>
            Gets the ID value that uniquely identifies the table.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Table.IndexSpaceUsed">
            <summary>
            Gets the space used by the index, in kilobytes.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Table.IsIndexable">
            <summary>
            Gets the Boolean property value that specifies whether an index can be placed on the table.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Table.IsPartitioned">
            <summary>
            Gets the Boolean property value that specifies whether the table is partitioned.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Table.PartitionScheme">
            <summary>
            Gets the partition scheme configured for the table.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Table.PartitionSchemeParameters">
            <summary>
            Represents a collection of PartitionSchemeParameter objects. Each PartitionSchemeParameter object represents a partition scheme parameter defined on the table.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Table.QuotedIdentifierStatus">
            <summary>
            Gets a Boolean property value that specifies whether identifiers delimited by double quotation marks are Transact-SQL reserved keywords or contain characters not usually allowed by the Transact-SQL syntax rules.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Table.Replicated">
            <summary>
            Gets the Boolean property that specifies whether the table is replicated.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Table.RowCount">
            <summary>
            Gets the number of rows in the table.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Table.RowCountAsDouble">
            <summary>
            Gets the number of rows in the table as a floating point value.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Table.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Table.TextFileGroup">
            <summary>
            Gets the filegroup used to maintain long, variable-length data stored in the table.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Table.ChangeTrackingEnabled">
            <summary>
            Gets a Boolean property value that specifies whether table has change tracking enabled.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Table.FileStreamFileGroup">
            <summary>
            Gets a name of file stream file group.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Table.FileStreamPartitionScheme">
            <summary>
            Gets a name of file stream partition scheme.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.StoredProcedureCollection">
            <summary>
            Collection of StoredProcedure objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.SchemaCollection">
            <summary>
            Collection of Schema objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.DatabaseDdlTrigger">
            <summary>
            The DatabaseDdlTrigger object represents a Microsoft SQL Server database data definition language (DDL) trigger.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.DatabaseDdlTrigger.Script">
            <summary>
            Generates a Transact-SQL script that can be used to re-create the (DDL) trigger.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.DatabaseDdlTrigger.Script(ApexSql.Diff.SqlServer.ScriptingOptions)">
            <summary>
            Generates a Transact-SQL script that can be used to re-create/drop the SQL object.
            </summary>
            <param name="scriptingOptions">Scripting options.</param>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseDdlTrigger.AnsiNullsStatus">
            <summary>
            Gets the Boolean property value that specifies whether SQL-92 NULL handling is enabled in the data definition language (DDL) trigger.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseDdlTrigger.AssemblyName">
            <summary>
            Gets the name of the assembly that contains the managed code that is executed when the data definition language (DDL) trigger is raised.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseDdlTrigger.BodyStartIndex">
            <summary>
            Gets the index value that represents the start of the DDL trigger text body.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseDdlTrigger.ClassName">
            <summary>
            Gets the name of the class in the assembly that contains the managed code that is executed when the data definition language (DDL) trigger is raised.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseDdlTrigger.CreateDate">
            <summary>
            Gets the date and time when the database data definition language (DDL) trigger was created.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseDdlTrigger.DateLastModified">
            <summary>
            Gets the date and time when the database data definition language (DDL) trigger was last modified.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseDdlTrigger.ExtendedProperties">
            <summary>
            Gets the extended properties of the ddl trigger.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseDdlTrigger.ID">
            <summary>
            Gets the ID value that uniquely identifies the ddl trigger.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseDdlTrigger.ImplementationType">
            <summary>
            Gets the implementation type for the database data definition language (DDL) trigger.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseDdlTrigger.IsEnabled">
            <summary>
            Gets the Boolean property value that specifies whether the database data definition language (DDL) trigger is enabled.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseDdlTrigger.IsEncrypted">
            <summary>
            Gets the Boolean property value that specifies whether the Transact-SQL batch or managed code is encrypted.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseDdlTrigger.IsSystemObject">
            <summary>
            Gets the Boolean property value that specifies whether the database data definition language (DDL) trigger is a system object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseDdlTrigger.MethodName">
            <summary>
            Gets the name of the method that is owned by the class in the assembly, which is executed when the trigger is raised.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseDdlTrigger.NotForReplication">
            <summary>
            Gets a Boolean property value that specifies whether the database data definition language (DDL) trigger is available for replication.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseDdlTrigger.Parent">
            <summary>
            Gets the Database object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseDdlTrigger.QuotedIdentifierStatus">
            <summary>
            Gets the Boolean value that specifies whether identifiers delimited by double quotation marks are Transact-SQL reserved keywords or contain characters not usually allowed by the Transact-SQL syntax rules.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseDdlTrigger.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseDdlTrigger.Text">
            <summary>
            Gets the Transact-SQL statement that defines the database data definition language (DDL) trigger.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseDdlTrigger.TextBody">
            <summary>
            Gets the body text that is used in the definition of the database data definition language (DDL) trigger.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseDdlTrigger.TextHeader">
            <summary>
            Gets the header text that is used in the definition of the database data definition language (DDL) trigger.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseDdlTrigger.TextMode">
            <summary>
            Gets the Boolean property value that specifies whether the (DDL) trigger header is editable as text.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.Broker.ServiceContract">
            <summary>
            The ServiceContract objects represents a contract that specifies the direction and type of messages in a conversation.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Broker.ServiceContract.Script">
            <summary>
            Generates a Transact-SQL script that can be used to re-create the SQL object.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Broker.ServiceContract.Script(ApexSql.Diff.SqlServer.ScriptingOptions)">
            <summary>
            Generates a Transact-SQL script that can be used to re-create/drop the SQL object.
            </summary>
            <param name="scriptingOptions">Scripting options.</param>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceContract.MessageTypeMappings">
            <summary>
            Gets the message type mappings of the ServiceContract object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceContract.Owner">
            <summary>
            Gets the owner of the service contract.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceContract.ExtendedProperties">
            <summary>
            Gets the extended properties of the service contract.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceContract.ID">
            <summary>
            Gets the ID value that uniquely identifies the object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceContract.Parent">
            <summary>
            Gets the ServiceBroker object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceContract.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Data.Row">
            <summary>
            A row with data 
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.Row.Item(System.Int32)">
            <summary>
            Returns value 
            </summary>
            <param name="index">The zero-based index of the element to get</param>
            <returns>The data at the specified index, otherwise - null</returns>
        </member>
        <member name="P:ApexSql.Diff.Data.Row.Values">
            <summary>
            Array of the values in the row
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.Row.IncludeInSynchronization">
            <summary>
            Whether row is included in synchronization 
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Data.DifferentRow">
            <summary>
            A different data row 
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DifferentRow.DifferentColumns">
            <summary>
            Array of indexes of different columns
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DifferentRow.SourceValues">
            <summary>
            Array of values in the source row
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DifferentRow.DestinationValues">
            <summary>
            Array of the values in the destination row
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DifferentRow.IncludeInSynchronization">
            <summary>
            Whether row is included in synchronization 
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Data.RowCollection">
            <summary>
            A collection of data rows
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Data.RowCollection.System#Collections#Generic#IEnumerable{ApexSql#Diff#Data#Row}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:ApexSql.Diff.Data.RowCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:ApexSql.Diff.Data.RowCollection.Count">
            <summary>
            Count of the rows
            </summary>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.Data.RowCollection.Item(System.Int32)">
            <summary>
            Returns a row
            </summary>
            <param name="index">The zero-based index of the element to get</param>
            <returns>The row at the specified index, otherwise - null</returns>
        </member>
        <member name="T:ApexSql.Diff.Data.DifferentRowCollection">
            <summary>
            A collection of different data rows
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Data.DifferentRowCollection.System#Collections#Generic#IEnumerable{ApexSql#Diff#Data#DifferentRow}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:ApexSql.Diff.Data.DifferentRowCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:ApexSql.Diff.Data.DifferentRowCollection.Count">
            <summary>
            Count of the different rows
            </summary>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.Data.DifferentRowCollection.Item(System.Int32)">
            <summary>
            Returns a row
            </summary>
            <param name="index">The zero-based index of the element to get</param>
            <returns>The row at the specified index, otherwise - null</returns>
        </member>
        <member name="T:ApexSql.Diff.ActivationManager">
            <summary>
            Class providing common methods for managing activation of ApexSQL Diff API 
            </summary>
        </member>
        <member name="M:ApexSql.Diff.ActivationManager.ActivateAutomatically(System.String)">
            <summary>
            Activates the product by communicating to the activation site
            </summary>
            <param name="productKey">Product key</param>
            <returns>True if the given activation code was valid</returns>
        </member>
        <member name="M:ApexSql.Diff.ActivationManager.ActivateManually(System.String,System.String)">
            <summary>
            Sets manually the product key and activation code on the server
            </summary>
            <param name="productKey">Product key</param>
            <param name="activationCode">Activation code</param>
            <returns>True if the given activation code was valid</returns>
        </member>
        <member name="M:ApexSql.Diff.ActivationManager.GenerateManualActivationUrl(System.String)">
            <summary>
            Returns URL used to connect to manual activation form
            </summary>
            <param name="productKey">Product key</param>
            <returns>URL used to connect to manual activation form</returns>
        </member>
        <member name="P:ApexSql.Diff.ActivationManager.ActivationCodeIsValid">
            <summary>
            Whether activation code is valid
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ActivationManager.ActivationInformation">
            <summary>
            Activation information if the product is activated on the server
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ActivationManager.ExpirationDate">
            <summary>
            Gets expiration date
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ActivationManager.HardwareId">
            <summary>
            Gets hardware id
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ActivationManager.KeyExpirationDate">
            <summary>
            Gets key expiration date
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ActivationManager.ProductId">
            <summary>
            Gets product id
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ActivationManager.ProductKey">
            <summary>
            Gets product key
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ActivationManager.ProductName">
            <summary>
            Gets product name
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ActivationManager.TotalTrialDays">
            <summary>
            The total number of days available for trial
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ActivationManager.TrialDaysLeft">
            <summary>
            Gets the number of days left to the date of the trial license key expiration
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ActivationManager.ProductActivated">
            <summary>
            Returns true if the product is activated
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ActivationManager.TrialHasEnded">
            <summary>
            Determines whether the trial version has ended
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ActivationManager.LastActivationReasonCode">
            <summary>
            Returns last activation reason code
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ActivationManager.LastActivationReason">
            <summary>
            Returns last activation reason
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SynchronizationDirection">
            <summary>
            A synchronization direction
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SynchronizationDirection.SourceToDestination">
            <summary>
            Synchronize destination datasource according to source datasource
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SynchronizationDirection.DestinationToSource">
            <summary>
            Synchronize source datasource according to destination datasource
            </summary>
        </member>
        <member name="T:ApexSql.Diff.ProjectBase">
            <summary>
            A base project class
            </summary>
        </member>
        <member name="M:ApexSql.Diff.ProjectBase.Serialize(System.Xml.XmlWriter,System.Object)">
            <summary>
            Serialize object
            </summary>
            <param name="xw"></param>
            <param name="o"></param>
        </member>
        <member name="M:ApexSql.Diff.ProjectBase.GetSourceDataSource">
            <summary>
            Returns source datasource
            </summary>
        </member>
        <member name="M:ApexSql.Diff.ProjectBase.GetDestinationDataSource">
            <summary>
            Returns destination datasource
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApexSql.Diff.ProjectBase.LoadSelectionProfile(System.String)">
            <summary>
            Load the selection profile from the file.
            </summary>
            <remarks>Selection profile contains 3 type of information:
            <list type="bullet">
            <item>Object types to load</item>
            <item>Objects to compare</item>
            <item>Objects to synchronize</item>
            </list>
            That is why to full restore this information following operations neccessary to be performed:
            <list type="bullet">
            <item>Set object types to load according to selection profile</item>
            <item>Load and map objects</item>
            <item>Set objects to compare according to selection profile</item>
            <item>Compare objects<seealso cref="M:ApexSql.Diff.ProjectBase.Compare">Compare objects</seealso></item>
            <item>Set objects to synchronize according to selection profile</item>
            </list>
            </remarks>
            <param name="profilePath">The path to selection profile</param>
            <exception cref="T:ApexSql.Diff.FileIOException">Occurs when file operation is failed</exception>
            <exception cref="T:ApexSql.Diff.UnhandledException">Occurs when unexpected error is encountered</exception>
        </member>
        <member name="M:ApexSql.Diff.ProjectBase.SaveSelectionProfile(System.String)">
            <summary>
            Save the selection profile to the file
            </summary>
            <param name="profilePath">The path to selection profile</param>
            <exception cref="T:ApexSql.Diff.FileIOException">Occurs when file operation is failed</exception>
            <exception cref="T:ApexSql.Diff.UnhandledException">Occurs when unexpected error is encountered</exception>
        </member>
        <member name="M:ApexSql.Diff.ProjectBase.ConnectToDataSources">
            <summary>
            Connect to the data sources that were previously set
            </summary>
            <exception cref="T:ApexSql.Diff.InvalidConnectionException">Occurs when connection to one or another database/snapshot failed</exception>
        </member>
        <member name="M:ApexSql.Diff.ProjectBase.CloseConnectionToDataSources">
            <summary>
            Close connection to the data sources
            </summary>
            <exception cref="T:ApexSql.Diff.InvalidConnectionException">Occurs when closing connection to one or another database/snapshot failed</exception>
        </member>
        <member name="M:ApexSql.Diff.ProjectBase.ResetConnection">
            <summary>
            Reset connection
            </summary>
        </member>
        <member name="M:ApexSql.Diff.ProjectBase.#ctor(System.Boolean)">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:ApexSql.Diff.ProjectBase.#ctor(System.String,System.Boolean)">
            <summary>
            Construct project from the project file
            </summary>
            <param name="filePath">Project file path</param>
            <param name="isDataMode">Whether project is for structure or data mode</param>
        </member>
        <member name="M:ApexSql.Diff.ProjectBase.#ctor(ApexSql.Diff.Common.DiffProject,ApexSql.Diff.Engine.CoreProject)">
            <summary>
            Construct project from diff project and core project
            </summary>
            <param name="diffProject"></param>
            <param name="coreProject"></param>
        </member>
        <member name="M:ApexSql.Diff.ProjectBase.#ctor(ApexSql.DataDiff.Common.DataDiffProject,ApexSql.DataDiff.Engine.ICoreProject)">
            <summary>
            Construct project from data diff project and core project
            </summary>
            <param name="diffProject"></param>
            <param name="coreProject"></param>
        </member>
        <member name="M:ApexSql.Diff.ProjectBase.UpdateRecentProjectNameList(System.String)">
            <summary>
            Update list of recent used project files
            </summary>
            <param name="name">project file name</param>
        </member>
        <member name="M:ApexSql.Diff.ProjectBase.LoadFromDisk(System.String)">
            <summary>
            Load ApexSQL Diff project from the file
            </summary>
            <param name="filePath">The name of the project file</param>
            <exception cref="T:ApexSql.Diff.FileIOException">Occurs when file operation is failed</exception>
            <exception cref="T:ApexSql.Diff.UnhandledException">Occurs when unexpected error is encountered</exception>
        </member>
        <member name="M:ApexSql.Diff.ProjectBase.ResetDataSources">
            <summary>
            Reset data source
            </summary>
        </member>
        <member name="M:ApexSql.Diff.ProjectBase.SaveToDisk(System.String)">
            <summary>
            Save the project to the file
            </summary>
            <param name="filePath">The file path to save project to</param>
            <exception cref="T:ApexSql.Diff.FileIOException">Occurs when file operation is failed</exception>
            <exception cref="T:ApexSql.Diff.UnhandledException">Occurs when unexpected error is encountered</exception>
        </member>
        <member name="M:ApexSql.Diff.ProjectBase.ApplyProjectProfile">
            <summary>
            Apply project profile
            </summary>
            <exception cref="T:ApexSql.Diff.UnhandledException">Occurs when unexpected error is encountered</exception>
        </member>
        <member name="M:ApexSql.Diff.ProjectBase.ExecuteScript(System.String)">
            <summary>
            Execute script from the file
            </summary>
            <param name="filePath">The file path to save script to</param>
            <exception cref="T:ApexSql.Diff.InvalidConnectionException">Occurs when database connection to database is invalid</exception>
            <exception cref="T:ApexSql.Diff.ServerErrorException">Error from Server (i.e. when execute SQL request)</exception>
            <exception cref="T:ApexSql.Diff.UnhandledException">Occurs when unexpected error is encountered</exception>
        </member>
        <member name="M:ApexSql.Diff.ProjectBase.PreLoadCatalog">
            <summary>
            Action that is called before catalog is loaded
            </summary>
        </member>
        <member name="M:ApexSql.Diff.ProjectBase.AfterLoadCatalog">
            <summary>
            Action that is called after catalog is loaded
            </summary>
        </member>
        <member name="M:ApexSql.Diff.ProjectBase.LoadCatalog">
            <summary>
            Reload objects with types chosen by TypesToLoad
            </summary>
            <exception cref="T:ApexSql.Diff.CancelException">Occurs when user cancels operation</exception>
            <exception cref="T:ApexSql.Diff.InvalidConnectionException">Occurs when database connection to database is invalid</exception>
            <exception cref="T:ApexSql.Diff.NotEnoughRightsException">Occurs when current user has no enough rights to perform operation</exception>
            <exception cref="T:ApexSql.Diff.ServerErrorException">Error from Server (i.e. when execute SQL request)</exception>
            <exception cref="T:ApexSql.Diff.UnhandledException">Occurs when unexpected error is encountered</exception>
        </member>
        <member name="M:ApexSql.Diff.ProjectBase.BeforeApplyingProfile">
            <summary>
            Behaviour before applying project profile
            </summary>
        </member>
        <member name="M:ApexSql.Diff.ProjectBase.CheckMappedCollections">
            <summary>
            Check mapped collection before comparison 
            </summary>
        </member>
        <member name="M:ApexSql.Diff.ProjectBase.Compare">
            <summary>
            Compare data sources
            </summary>
            <exception cref="T:ApexSql.Diff.CancelException">Occurs when user cancels operation</exception>
            <exception cref="T:ApexSql.Diff.NoSelectedForOperationObjectsException">Occurs when object selected for comparison</exception>
            <exception cref="T:ApexSql.Diff.UnhandledException">Occurs when unexpected error is encountered</exception>
        </member>
        <member name="F:ApexSql.Diff.ProjectBase.progressAdapter">
            <summary>
            Progress Info adapter (marshall call to Common.UI.IProgressInfo to API.IProgressInfo
            </summary>
        </member>
        <member name="M:ApexSql.Diff.ProjectBase.GeneratePlainHtmlReport(System.String)">
            <summary>
            Generate printable HTML report
            </summary>
            <param name="filePath">The path to the file to save report to</param>
            <exception cref="T:ApexSql.Diff.CancelException">Occurs when user cancels operation</exception>
            <exception cref="T:ApexSql.Diff.FileIOException">Occurs when file is readonly or you have no rights to write file</exception>
            <exception cref="T:ApexSql.Diff.UnhandledException">Occurs when unexpected error is encountered</exception>
            <exception cref="T:ApexSql.Diff.FileIOException">Occurs when incorrect filePath parameter is specified</exception>
        </member>
        <member name="M:ApexSql.Diff.ProjectBase.GenerateHtmlReport(System.String)">
            <summary>
            Generate structured HTML report with collapsible regions
            </summary>
            <param name="filePath">The file path to save report to</param>
            <exception cref="T:ApexSql.Diff.CancelException">Occurs when user cancels operation</exception>
            <exception cref="T:ApexSql.Diff.FileIOException">Occurs when file is readonly or you have no rights to write file</exception>
            <exception cref="T:ApexSql.Diff.UnhandledException">Occurs when unexpected error is encountered</exception>
            <exception cref="T:ApexSql.Diff.FileIOException">Occurs when incorrect filePath parameter is specified</exception>
        </member>
        <member name="M:ApexSql.Diff.ProjectBase.SetProgressCallback(ApexSql.Diff.IProgressInfo)">
            <summary>
            Set progress callback to allow subscribers show progress information or stop the process
            </summary>
            <param name="progressInfo">Progress interface</param>
        </member>
        <member name="M:ApexSql.Diff.ProjectBase.Clone">
            <summary>
            Clone this project
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApexSql.Diff.ProjectBase.LoadAndMapObjects">
            <summary>
            Load and map objects from databases
            </summary>
            <exception cref="T:ApexSql.Diff.CancelException">Occurs when user cancels operation</exception>
            <exception cref="T:ApexSql.Diff.InvalidConnectionException">Occurs when database connection to database is invalid</exception>
            <exception cref="T:ApexSql.Diff.NotEnoughRightsException">Occurs when current user has no enough rights to perform operation</exception>
            <exception cref="T:ApexSql.Diff.ServerErrorException">Error from Server (i.e. when execute SQL request)</exception>
            <exception cref="T:ApexSql.Diff.UnhandledException">Occurs when unexpected error is encountered</exception>
        </member>
        <member name="M:ApexSql.Diff.ProjectBase.Synchronize">
            <summary>
            Make synchronization script
            </summary>
            <exception cref="T:ApexSql.Diff.CancelException">Occurs when user cancels operation</exception>
            <exception cref="T:ApexSql.Diff.NoSelectedForOperationObjectsException">Occurs when object selected for comparison/synchronization</exception>
            <exception cref="T:ApexSql.Diff.UnhandledException">Occurs when unexpected error is encountered</exception>
        </member>
        <member name="M:ApexSql.Diff.ProjectBase.Synchronize(System.String)">
            <summary>
            Generate synchronization script on checked objects
            </summary>
            <param name="scriptFilePath">Path to file with script</param>
            <exception cref="T:ApexSql.Diff.CancelException">Occurs when user cancels operation</exception>
            <exception cref="T:ApexSql.Diff.FileIOException">Occurs when file is readonly or you have no rights to write file</exception>
            <exception cref="T:ApexSql.Diff.NoSelectedForOperationObjectsException">Occurs when object selected for comparison/synchronization</exception>
            <exception cref="T:ApexSql.Diff.UnhandledException">Occurs when unexpected error is encountered</exception>
        </member>
        <member name="M:ApexSql.Diff.ProjectBase.SyncFolder(System.Collections.Generic.List{ApexSql.Diff.Engine.SourceControls.ScriptFolderAction},ApexSql.Diff.IProgressInfo)">
            <summary>
            
            </summary>
            <param name="actions"></param>
            <param name="pi"></param>
        </member>
        <member name="M:ApexSql.Diff.ProjectBase.ExecuteSynchronizationScript">
            <summary>
            Executes syncronization script generated previously. If script is generated to file function will read the file and execute script from there
            </summary>
            <exception cref="T:ApexSql.Diff.CancelException">Occurs when user cancels script generation if it neccessary to create it</exception>
            <exception cref="T:ApexSql.Diff.InvalidConnectionException">Occurs when database connection to database is invalid</exception>
            <exception cref="T:ApexSql.Diff.ServerErrorException">Error from Server (i.e. when execute SQL request)</exception>
            <exception cref="T:ApexSql.Diff.UnhandledException">Occurs when unexpected error is encountered</exception>
            <return>Error messages generated during synchronization script execution or empty array if no errors</return>
        </member>
        <member name="P:ApexSql.Diff.ProjectBase.IsDataMode">
            <summary>
            Object representing axDiff Project file for current (structure/data) mode
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ProjectBase.DiffProject">
            <summary>
            Object representing axDiff Project file for current (structure/data) mode
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ProjectBase.Name">
            <summary>
            The name of the project
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ProjectBase.Comments">
            <summary>
            The user comments for the project
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ProjectBase.FilePath">
            <summary>
            The file path to the project
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ProjectBase.IsNew">
            <summary>
            Indicates whether it is a new project
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ProjectBase.IsDirty">
            <summary>
            Indicates whether project is dirty
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ProjectBase.Updated">
            <summary>
            The time when project updated
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ProjectBase.Created">
            <summary>
            The time when project created
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ProjectBase.StructureEngineProject">
            <summary>
            Core Project object for structure mode
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ProjectBase.DataEngineProject">
            <summary>
            Core Project object for data mode
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ProjectBase.StructureRootCatalog">
            <summary>
            Catalog for current Core Project
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ProjectBase.DataRootCatalog">
            <summary>
            Catalog for current Core Project
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ProjectBase.DestinationDataSource">
            <summary>
            Destination datasource
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ProjectBase.SourceDataSource">
            <summary>
            Source datasource
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ProjectBase.StoreSourceEncryptedPassword">
            <summary>
            Whether source password is stored in encrypted form.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ProjectBase.StoreDestinationEncryptedPassword">
            <summary>
            Whether destination password is stored in encrypted form.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ProjectBase.SourceDatabase">
            <summary>
            Source database
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ProjectBase.DestinationDatabase">
            <summary>
            Destination database
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ProjectBase.SourceCollation">
            <summary>
            Source collation information
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ProjectBase.DestinationCollation">
            <summary>
            Destination collation information
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ProjectBase.NeedCompareCollections">
            <summary>
            Whether catalog need to be compared
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ProjectBase.NeedLoadCollections">
            <summary>
            Whether catalog need to be loaded
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ProjectBase.NeedGenerateScript">
            <summary>
            Whether it is necessary to generate script
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ProjectBase.SynchronizationScript">
            <summary>
            Synchronization script
            </summary>
            <exception cref="T:ApexSql.Diff.CancelException">Occurs when user cancels operation</exception>
        </member>
        <member name="T:ApexSql.Diff.Data.MappedDataObject`1">
            <summary>
            A mapped data object
            </summary>
        </member>
        <member name="F:ApexSql.Diff.Data.MappedDataObject`1.dataObject">
            <summary>Catalog of data objects</summary>
        </member>
        <member name="F:ApexSql.Diff.Data.MappedDataObject`1.dataCatalog">
            <summary>Data catalog</summary>
        </member>
        <member name="M:ApexSql.Diff.Data.MappedDataObject`1.Unmap">
            <summary>
            Unmap the object
            </summary>
            <returns>True if the object has been unmapped</returns>
        </member>
        <member name="P:ApexSql.Diff.Data.MappedDataObject`1.ObjectType">
            <summary>
            The <see cref="P:ApexSql.Diff.Data.MappedDataObject`1.ObjectType">type</see> of the object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.MappedDataObject`1.SourceName">
            <summary>
            The name of the source object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.MappedDataObject`1.SourceOwner">
            <summary>
            The owner of the source object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.MappedDataObject`1.DestinationName">
            <summary>
            The name of the destination object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.MappedDataObject`1.DestinationOwner">
            <summary>
            The owner of the destination object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.MappedDataObject`1.SourceObject">
            <summary>
            The source object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.MappedDataObject`1.DestinationObject">
            <summary>
            The destination object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.MappedDataObject`1.SourceRowCountEstimate">
            <summary>
            The count of rows in the source object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.MappedDataObject`1.DestinationRowCountEstimate">
            <summary>
            The count of rows in the destination object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.MappedDataObject`1.MappedColumns">
            <summary>
            The collection of mapped columns
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.MappedDataObject`1.WhereClause">
            <summary>
            The WHERE filter to filter rows in the source or destination objects
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.MappedDataObject`1.IncludeInComparison">
            <summary>
            Is object included in comparison
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.MappedDataObject`1.CompatibleKeys">
            <summary>
            Collection of compatible keys that can be used as comparison key
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.MappedDataObject`1.ComparisonKey">
            <summary>
            Comparison key that is used for mapping if UseComparisonKeyColumns is False
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.MappedDataObject`1.ComparisonKeyColumns">
            <summary>
            Comparison key columns that are used for mapping if UseComparisonKeyColumns is True.
            Returns null if UseComparisonKeyColumns is False.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.MappedDataObject`1.UseComparisonKeyColumns">
            <summary>
            Indicates what is used for mapping: comparison key or comparison key columns
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.ComparedObjectCollection`1">
            <summary>
            A collection of compared objects
            </summary>
            <typeparam name="T">Successor of StructureObject</typeparam>
        </member>
        <member name="T:ApexSql.Diff.ComparedObjectCollectionBase`1">
            <summary>
            A collection of compared objects
            </summary>
            <typeparam name="T">An type of elements in a collection</typeparam>
        </member>
        <member name="F:ApexSql.Diff.ComparedObjectCollectionBase`1.comparedObjects">
            <summary> collection of compared objects</summary>
        </member>
        <member name="F:ApexSql.Diff.ComparedObjectCollectionBase`1.project">
            <summary> project</summary>
        </member>
        <member name="M:ApexSql.Diff.ComparedObjectCollectionBase`1.CreateObject(ApexSql.Diff.Engine.Db.IMatchedObject)">
            <summary>Create object from IMatchedObject</summary>
        </member>
        <member name="M:ApexSql.Diff.ComparedObjectCollectionBase`1.IncludeAllInSynchronization">
            <summary>
            Include all objects in this collection to synchronization
            </summary>
        </member>
        <member name="M:ApexSql.Diff.ComparedObjectCollectionBase`1.ExcludeAllFromSynchronization">
            <summary>
            Exclude all objects in this collection from synchronization
            </summary>
        </member>
        <member name="M:ApexSql.Diff.ComparedObjectCollectionBase`1.IncludeInSynchronization(System.String[])">
            <summary>
            Include this collection's objects matching to at least one regular expression from the list to synchronization
            </summary>
        </member>
        <member name="M:ApexSql.Diff.ComparedObjectCollectionBase`1.ExcludeFromSynchronization(System.String[])">
            <summary>
            Exclude this collection's objects matching from at least one regular expression from the list from synchronization
            </summary>
        </member>
        <member name="M:ApexSql.Diff.ComparedObjectCollectionBase`1.GetItemBySourceName(System.String)">
            <summary>
            Search the compared object by the source object's fully qualified name
            </summary>
            <param name="fullyQualifiedName">Fully qualified name of the object</param>
            <returns>Found compared object otherwise, otherwise null</returns>
        </member>
        <member name="M:ApexSql.Diff.ComparedObjectCollectionBase`1.GetItemByDestinationName(System.String)">
            <summary>
            Search the compared object by the destination object's fully qualified name
            </summary>
            <param name="fullyQualifiedName">Fully qualified name of the object</param>
            <returns>Found compared object otherwise, otherwise null</returns>
        </member>
        <member name="M:ApexSql.Diff.ComparedObjectCollectionBase`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:ApexSql.Diff.ComparedObjectCollectionBase`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:ApexSql.Diff.ComparedObjectCollectionBase`1.Count">
            <summary>
            Count of compared objects
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ComparedObjectCollectionBase`1.CountDifferent">
            <summary>
            Count of different objects
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ComparedObjectCollectionBase`1.CountIdentical">
            <summary>
            Count of identical objects
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ComparedObjectCollectionBase`1.CountSourceOnly">
            <summary>
            Count of the source objects only
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ComparedObjectCollectionBase`1.CountDestinationOnly">
            <summary>
            Count of the destination objects only
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ComparedObjectCollectionBase`1.CountToSynchronize">
            <summary>
            Count of objects to synchronize
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ComparedObjectCollectionBase`1.Item(System.Int32)">
            <summary>
            Returns a compared object
            </summary>
            <param name="index">The zero-based index of the element to get</param>
            <returns>The compared object at the specified index, otherwise - null</returns>
        </member>
        <member name="M:ApexSql.Diff.Structure.ComparedObjectCollection`1.CreateObject(ApexSql.Diff.Engine.Db.IMatchedObject)">
            <summary>
            Creates ComparedObject from IMatchedObject
            </summary>
            <param name="mo"></param>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.Structure.ComparedObjectCollection`1.Count">
            <summary>
            Count of compared objects
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.ComparedDefaultCollection">
            <summary>
            A collection of compared defaults
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.ComparedProcedureCollection">
            <summary>
            A collection of compared procedures
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.ComparedRoleCollection">
            <summary>
            A collection of compared roles
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.ComparedRuleCollection">
            <summary>
            A collection of compared rules
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.ComparedTableCollection">
            <summary>
            A collection of compared tables
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.ComparedUserCollection">
            <summary>
            A collection of compared users
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.ComparedUserDataTypeCollection">
            <summary>
            A collection of compared user defined types
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.ComparedFunctionCollection">
            <summary>
            A collection of compared functions
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.ComparedViewCollection">
            <summary>
            A collection of compared views
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.ComparedAssemblyCollection">
            <summary>
            A collection of compared assemblies
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.ComparedContractCollection">
            <summary>
            A collection of compared contracts
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.ComparedCredentialCollection">
            <summary>
            A collection of compared credentials
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.ComparedDdlTriggerCollection">
            <summary>
            A collection of compared DDL triggers
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.ComparedEventNotificationCollection">
            <summary>
            A collection of compared event notifications
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.ComparedFulltextCatalogCollection">
            <summary>
            A collection of compared fulltext catalogs
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.ComparedMessageTypeCollection">
            <summary>
            A collection of compared message types
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.ComparedQueueCollection">
            <summary>
            A collection of compared queues
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.ComparedPartitionFunctionCollection">
            <summary>
            A collection of compared partition functions
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.ComparedPartitionSchemeCollection">
            <summary>
            A collection of compared partition schemes
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.ComparedRemoteServiceBindingCollection">
            <summary>
            A collection of compared remote service bindings
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.ComparedRouteCollection">
            <summary>
            A collection of compared routes
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.ComparedSchemaCollection">
            <summary>
            A collection of compared schemas
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.ComparedServiceCollection">
            <summary>
            A collection of compared services
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.ComparedSynonymCollection">
            <summary>
            A collection of compared synonyms
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.ComparedTriggerCollection">
            <summary>
            A collection of compared triggers
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.ComparedXmlSchemaCollectionCollection">
            <summary>
            A collection of compared xml schema collections
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.UserDefinedFunction">
            <summary>
            The UserDefinedFunction object represents a Microsoft SQL Server user-defined function or a Microsoft SQL Server user-defined aggregate. 
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.UserDefinedFunction.Script">
            <summary>
            Generates a Transact-SQL script that can be used to re-create the user-defined function. 
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.UserDefinedFunction.Script(ApexSql.Diff.SqlServer.ScriptingOptions)">
            <summary>
            Generates a Transact-SQL script that can be used to re-create/drop the SQL object.
            </summary>
            <param name="scriptingOptions">Scripting options.</param>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedFunction.AnsiNullsStatus">
            <summary>
            Gets the Boolean property value that specifies whether SQL-92 NULL handling is enabled in the user-defined function.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedFunction.AssemblyName">
            <summary>
            Gets the name of the assembly for the user-defined function.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedFunction.ClassName">
            <summary>
            Gets the name of the class for the user-defined function.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedFunction.Columns">
            <summary>
            Represents a collection of Column objects. Each Column object represents an extended property defined on the user-defined function.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedFunction.CreateDate">
            <summary>
            Gets the date and time when the user-defined function was created.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedFunction.DataType">
            <summary>
            Gets the data type for scalar functions.
            If FunctionType is Inline, Table or Unknown, return null.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedFunction.DateLastModified">
            <summary>
            Gets date and time when user-defined function was last modified. 
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedFunction.ExecutionContext">
            <summary>
            Gets the execution context for the user-defined function. 
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedFunction.ExecutionContextPrincipal">
            <summary>
            Gets the execution context principal for the user-defined function.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedFunction.ExtendedProperties">
            <summary>
            Gets the extended properties of the UserDefinedFunction object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedFunction.FunctionType">
            <summary>
            Gets user-defined function type.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedFunction.ID">
            <summary>
            Gets the ID value that uniquely identifies the user-defined function.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedFunction.ImplementationType">
            <summary>
            T-SQL or CLR
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedFunction.IsDeterministic">
            <summary>
            Gets the Boolean property value that specifies whether the user-defined function is deterministic.
            If user-defined function is deterministic, can be used as index.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedFunction.IsEncrypted">
            <summary>
            Gets the Boolean property value that specifies whether the user-defined function is encrypted.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedFunction.IsSchemaBound">
            <summary>
            Gets the Boolean property value that specifies whether the user-defined function is bound to a schema.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedFunction.IsSystemObject">
            <summary>
            Gets the Boolean property value that specifies whether the user-defined function is a system object. 
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedFunction.MethodName">
            <summary>
            Gets the method name for the user-defined function.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedFunction.Parameters">
            <summary>
            Represents a collection of Parameter objects. Each Parameter object represents a parameter defined for the user-defined function.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedFunction.Parent">
            <summary>
            Gets the Database object that is the parent of the UserDefinedFunction object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedFunction.QuotedIdentifierStatus">
            <summary>
            Gets a Boolean property value that specifies whether identifiers delimited by double quotation marks are Transact-SQL reserved keywords or contain characters not usually allowed by the Transact-SQL syntax rules.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedFunction.ReturnsNullOnNullInput">
            <summary>
            Gets the Boolean property that specifies whether to call the function if at least one of the function arguments is null.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedFunction.TableVariableName">
            <summary>
            Gets the table variable name.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedFunction.TextBody">
            <summary>
            Gets the Transact-SQL string that defines the user-defined function.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedFunction.TextHeader">
            <summary>
            Gets the header part of the Transact-SQL string that defines the user-defined function.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedFunction.TextMode">
            <summary>
            Gets the Boolean property that specifies whether the text header is editable as text.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedFunction.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedFunction.Owner">
            <summary>
            Gets the owner of the database object.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.SqlAssemblyCollection">
            <summary>
            Collection of SqlAssembly objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.RuleCollection">
            <summary>
            Collection of Rule objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.PartitionSchemeParameterCollection">
            <summary>
            Collection of PartitionSchemeParameter objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.PartitionSchemeParameter">
            <summary>
            The PartitionSchemeParameter object provides programmatic access to partition scheme parameters.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.PartitionSchemeParameter.Name">
            <summary>
            Object name accessor
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.PartitionSchemeParameter.QualifiedName">
            <summary>
            Gets the fully qualified name of object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.PartitionSchemeParameter.ID">
            <summary>
            Gets the index position of the PartitionSchemeParameter object within the collection.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.PartitionSchemeParameter.Parent">
            <summary>
            Gets parent object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.PartitionSchemeParameter.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.PartitionScheme">
            <summary>
            The PartitionScheme object provides programmatic access to partition schemes. 
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.PartitionScheme.Script">
            <summary>
            Generates a Transact-SQL script that can be used to re-create the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.PartitionScheme.Script(ApexSql.Diff.SqlServer.ScriptingOptions)">
            <summary>
            Generates a Transact-SQL script that can be used to re-create/drop the SQL object.
            </summary>
            <param name="scriptingOptions">Scripting options.</param>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.PartitionScheme.ExtendedProperties">
            <summary>
            Gets the extended properties of the object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.PartitionScheme.ID">
            <summary>
            Gets the ID value that uniquely identifies the object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.PartitionScheme.Parent">
            <summary>
            Gets the Database object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.PartitionScheme.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.PartitionScheme.FileGroups">
            <summary>
            Gets the names of the file groups that holds the partitions specified by partition function.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.PartitionScheme.NextUsedFileGroup">
            <summary>
            Gets the name of the filegroup that has NEXT USED status.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.PartitionScheme.PartitionFunction">
            <summary>
            Gets the name of the partition function used in this partition scheme.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.PartitionFunction">
            <summary>
            The PartitionFunction object provides programmatic access to partition functions. 
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.PartitionFunction.Script">
            <summary>
            Generates a Transact-SQL script that can be used to re-create the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.PartitionFunction.Script(ApexSql.Diff.SqlServer.ScriptingOptions)">
            <summary>
            Generates a Transact-SQL script that can be used to re-create/drop the SQL object.
            </summary>
            <param name="scriptingOptions">Scripting options.</param>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.PartitionFunction.CreateDate">
            <summary>
            Gets the date and time when the PartitionFunction was created.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.PartitionFunction.ExtendedProperties">
            <summary>
            Gets the extended properties of the object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.PartitionFunction.ID">
            <summary>
            Gets the ID value that uniquely identifies the object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.PartitionFunction.Parent">
            <summary>
            Gets the Database object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.PartitionFunction.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.PartitionFunction.NumberOfPartitions">
            <summary>
            Gets the number of partitions.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.PartitionFunction.RangeType">
            <summary>
            Gets the placement of boundary values in relation to the interval.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.PartitionFunction.RangeValues">
            <summary>
            Gets range values that define the distribution of the partition function.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.PartitionFunction.PartitionFunctionParameters">
            <summary>
            Represents a collection of PartitionFunctionParameter objects. Each PartitionFunctionParameters object represents a partition function parameter defined on the partition function.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.ImplementationType">
            <summary>
            Type of implementation for a stored procedure, a user-defined function, and other objects.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ImplementationType.SqlClr">
            <summary>
            Implemented with the common language runtime (CLR) type. 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ImplementationType.TransactSql">
            <summary>
            Implemented with Transact-SQL.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.FullTextCatalogCollection">
            <summary>
            Collection of FullTextCatalog objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.DatabaseEventSet">
            <summary>
            The DatabaseEventSet object represents a MicrosoftSQL Server set of database events.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.AddRoleMember">
            <summary>
            Gets a Boolean property value that specifies whether the ADD_ROLE_MEMBER event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.AlterApplicationRole">
            <summary>
            Gets a Boolean property value that specifies whether the ALTER_APPLICATION_ROLE event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.AlterAssembly">
            <summary>
            Gets a Boolean property value that specifies whether the ALTER_ASSEMBLY event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.AlterAuthorizationDatabase">
            <summary>
            Gets a Boolean property value that specifies whether the ALTER_AUTHORIZATION_DATABASE event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.AlterCertificate">
            <summary>
            Gets a Boolean property value that specifies whether the ALTER_CERTIFICATE event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.AlterFunction">
            <summary>
            Gets a Boolean property value that specifies whether the ALTER_FUNCTION event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.AlterIndex">
            <summary>
            Gets a Boolean property value that specifies whether the ALTER_INDEX event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.AlterMessageType">
            <summary>
            Gets a Boolean property value that specifies whether the ALTER_MESSAGE_TYPE event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.AlterPartitionFunction">
            <summary>
            Gets a Boolean property value that specifies whether the ALTER_PARTITION_FUNCTION event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.AlterPartitionScheme">
            <summary>
            Gets a Boolean property value that specifies whether the ALTER_PARTITION_SCHEME event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.AlterProcedure">
            <summary>
            Gets a Boolean property value that specifies whether the ALTER_PROCEDURE event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.AlterQueue">
            <summary>
            Gets a Boolean property value that specifies whether the ALTER_QUEUE event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.AlterRemoteServiceBinding">
            <summary>
            Gets a Boolean property value that specifies whether the ALTER_REMOTE_SERVICE_BINDING event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.AlterRole">
            <summary>
            Gets a Boolean property value that specifies whether the ALTER_ROLE event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.AlterRoute">
            <summary>
            Gets a Boolean property value that specifies whether the ALTER_ROUTE event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.AlterSchema">
            <summary>
            Gets a Boolean property value that specifies whether the ALTER_SCHEMA event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.AlterService">
            <summary>
            Gets a Boolean property value that specifies whether the ALTER_SERVICE event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.AlterTable">
            <summary>
            Gets a Boolean property value that specifies whether the ALTER_TABLE event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.AlterTrigger">
            <summary>
            Gets a Boolean property value that specifies whether the ALTER_TRIGGER event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.AlterUser">
            <summary>
            Gets a Boolean property value that specifies whether the ALTER_USER event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.AlterView">
            <summary>
            Gets a Boolean property value that specifies whether the ALTER_VIEW event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.AlterXmlSchemaCollection">
            <summary>
            Gets a Boolean property value that specifies whether the ALTER_XML_SCHEMA_COLLECTION event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.BrokerQueueDisabled">
            <summary>
            Gets a Boolean property value that specifies whether the BROKER_QUEUE_DISABLED event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.CreateApplicationRole">
            <summary>
            Gets a Boolean property value that specifies whether the CREATE_APPLICATION_ROLE event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.CreateAssembly">
            <summary>
            Gets a Boolean property value that specifies whether the CREATE_ASSEMBLY event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.CreateCertificate">
            <summary>
            Gets a Boolean property value that specifies whether the CREATE_CERTIFICATE event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.CreateContract">
            <summary>
            Gets a Boolean property value that specifies whether the CREATE_CONTRACT event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.CreateEventNotification">
            <summary>
            Gets a Boolean property value that specifies whether the CREATE_EVENT_NOTIFICATION event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.CreateFunction">
            <summary>
            Gets a Boolean property value that specifies whether the CREATE_FUNCTION event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.CreateIndex">
            <summary>
            Gets a Boolean property value that specifies whether the CREATE_INDEX event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.CreateMessageType">
            <summary>
            Gets a Boolean property value that specifies whether the CREATE_MESSAGE_TYPE event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.CreatePartitionFunction">
            <summary>
            Gets a Boolean property value that specifies whether the CREATE_PARTITION_FUNCTION event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.CreatePartitionScheme">
            <summary>
            Gets a Boolean property value that specifies whether the CREATE_PARTITION_SCHEME event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.CreateProcedure">
            <summary>
            Gets a Boolean property value that specifies whether the CREATE_PROCEDURE event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.CreateQueue">
            <summary>
            Gets a Boolean property value that specifies whether the CREATE_QUEUE event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.CreateRemoteServiceBinding">
            <summary>
            Gets a Boolean property value that specifies whether the CREATE_REMOTE_SERVICE_BINDING event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.CreateRole">
            <summary>
            Gets a Boolean property value that specifies whether the CREATE_ROLE event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.CreateRoute">
            <summary>
            Gets a Boolean property value that specifies whether the CREATE_ROUTE event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.CreateSchema">
            <summary>
            Gets a Boolean property value that specifies whether the CREATE_SCHEMA event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.CreateService">
            <summary>
            Gets a Boolean property value that specifies whether the CREATE_SERVICE event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.CreateStatistics">
            <summary>
            Gets a Boolean property value that specifies whether the CREATE_STATISTICS event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.CreateSynonym">
            <summary>
            Gets a Boolean property value that specifies whether the CREATE_SYNONYM event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.CreateTable">
            <summary>
            Gets a Boolean property value that specifies whether the CREATE_TABLE event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.CreateTrigger">
            <summary>
            Gets a Boolean property value that specifies whether the CREATE_TRIGGER event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.CreateType">
            <summary>
            Gets a Boolean property value that specifies whether the CREATE_TYPE event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.CreateUser">
            <summary>
            Gets a Boolean property value that specifies whether the CREATE_USER event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.CreateView">
            <summary>
            Gets a Boolean property value that specifies whether the CREATE_VIEW event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.CreateXmlIndex">
            <summary>
            Gets a Boolean property value that specifies whether the CREATE_XML_INDEX event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.CreateXmlSchemaCollection">
            <summary>
            Gets a Boolean property value that specifies whether the CREATE_XML_SCHEMA_COLLECTION event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.DenyDatabase">
            <summary>
            Gets a Boolean property value that specifies whether the DENY_DATABASE event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.DropApplicationRole">
            <summary>
            Gets a Boolean property value that specifies whether the DROP_APPLICATION_ROLE event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.DropAssembly">
            <summary>
            Gets a Boolean property value that specifies whether the DROP_ASSEMBLY event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.DropCertificate">
            <summary>
            Gets a Boolean property value that specifies whether the DROP_CERTIFICATE event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.DropContract">
            <summary>
            Gets a Boolean property value that specifies whether the DROP_CONTRACT event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.DropDatabase">
            <summary>
            Gets a Boolean property value that specifies whether the DROP_DATABASE event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.DropEventNotification">
            <summary>
            Gets a Boolean property value that specifies whether the DROP_EVENT_NOTIFICATION event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.DropFunction">
            <summary>
            Gets a Boolean property value that specifies whether the DROP_FUNCTION event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.DropIndex">
            <summary>
            Gets a Boolean property value that specifies whether the DROP_INDEX event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.DropMessageType">
            <summary>
            Gets a Boolean property value that specifies whether the DROP_MESSAGE_TYPE event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.DropPartitionFunction">
            <summary>
            Gets a Boolean property value that specifies whether the DROP_PARTITION_FUNCTION event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.DropPartitionScheme">
            <summary>
            Gets a Boolean property value that specifies whether the DROP_PARTITION_SCHEME event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.DropProcedure">
            <summary>
            Gets a Boolean property value that specifies whether the DROP_PROCEDURE event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.DropQueue">
            <summary>
            Gets a Boolean property value that specifies whether the DROP_QUEUE event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.DropRemoteServiceBinding">
            <summary>
            Gets a Boolean property value that specifies whether the DROP_REMOTE_SERVICE_BINDING event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.DropRole">
            <summary>
            Gets a Boolean property value that specifies whether the DROP_ROLE event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.DropRoleMember">
            <summary>
            Gets a Boolean property value that specifies whether the DROP_ROLE_MEMBER event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.DropRoute">
            <summary>
            Gets a Boolean property value that specifies whether the DROP_ROUTE event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.DropSchema">
            <summary>
            Gets a Boolean property value that specifies whether the DROP_SCHEMA event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.DropService">
            <summary>
            Gets a Boolean property value that specifies whether the DROP_SERVICE event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.DropStatistics">
            <summary>
            Gets a Boolean property value that specifies whether the DROP_STATISTICS event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.DropSynonym">
            <summary>
            Gets a Boolean property value that specifies whether the DROP_SYNONYM event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.DropTable">
            <summary>
            Gets a Boolean property value that specifies whether the DROP_TABLE event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.DropTrigger">
            <summary>
            Gets a Boolean property value that specifies whether the DROP_TRIGGER event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.DropType">
            <summary>
            Gets a Boolean property value that specifies whether the DROP_TYPE event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.DropUser">
            <summary>
            Gets a Boolean property value that specifies whether the DROP_USER event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.DropView">
            <summary>
            Gets a Boolean property value that specifies whether the DROP_VIEW event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.DropXmlSchemaCollection">
            <summary>
            Gets a Boolean property value that specifies whether the DROP_XML_SCHEMA_COLLECTION event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.GrantDatabase">
            <summary>
            Gets a Boolean property value that specifies whether the GRANT_DATABASE event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.QueueActivation">
            <summary>
            Gets a Boolean property value that specifies whether the QUEUE_ACTIVATION event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.RevokeDatabase">
            <summary>
            Gets a Boolean property value that specifies whether the REVOKE_DATABASE event is included in the event set.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseEventSet.UpdateStatistics">
            <summary>
            Gets a Boolean property value that specifies whether the UPDATE_STATISTICS event is included in the event set.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.Broker.ServiceQueueCollection">
            <summary>
            Collection of ServiceQueue objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.ProjectCollectionBase`1">
            <summary>
            A collection of projects
            </summary>
            <typeparam name="T">The successor of ProjectBase</typeparam>
        </member>
        <member name="M:ApexSql.Diff.ProjectCollectionBase`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:ApexSql.Diff.ProjectCollectionBase`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:ApexSql.Diff.ProjectCollectionBase`1.Count">
            <summary>
            The count of elements
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ProjectCollectionBase`1.Item(System.Int32)">
            <summary>
            Returns a project
            </summary>
            <param name="index">The zero-based index of the element to get</param>
            <returns>The project at the specified index, otherwise - null</returns>
        </member>
        <member name="T:ApexSql.Diff.StructureProjectCollection">
            <summary>
            A collection of structure projects
            </summary>
        </member>
        <member name="T:ApexSql.Diff.DataProjectCollection">
            <summary>
            A collection of data projects
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Data.DataComparisonOptions">
            <summary>
            Options used when comparing databases
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataComparisonOptions.IgnoreTrailingSpaces">
            <summary>
            Ignore trailing spaces
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataComparisonOptions.IgnoreCaseInTextDataTypes">
            <summary>
            Ignore case in text data types
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataComparisonOptions.IgnoreCaseInNames">
            <summary>
            Ignore case in object names
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataComparisonOptions.IgnoreGuidColumns">
            <summary>
            Ignore GUID columns
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataComparisonOptions.IgnoreBlobColumns">
            <summary>
            Ignore BLOB columns
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataComparisonOptions.IgnoreTimestampColumns">
            <summary>
            Ignore timestamp columns
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataComparisonOptions.CompareIdenticalRows">
            <summary>
            Compare rows that exist in both databases and are identical
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataComparisonOptions.CompareDifferentRows">
            <summary>
            Compare rows that exist in both databases and are different
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataComparisonOptions.CompareMissingRows">
            <summary>
            Compare rows that exist in source database only 
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataComparisonOptions.CompareAdditionalRows">
            <summary>
            Compare rows that exist in destination database only
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.UserDefinedFunctionCollection">
            <summary>
            Collection of UserDefinedFunction objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.StatisticColumn">
            <summary>
            The StatisticColumn object represents a Microsoft SQL Server column that is participating in an statistics counter.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.StatisticColumn.Name">
            <summary>
            Object name accessor
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.StatisticColumn.QualifiedName">
            <summary>
            Gets the fully qualified name of object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.StatisticColumn.ID">
            <summary>
            Gets the ID value.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.StatisticColumn.Parent">
            <summary>
            Gets the Statistic object that is the parent of the StatisticColumn object.
            </summary> 
        </member>
        <member name="P:ApexSql.Diff.SqlServer.StatisticColumn.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.SqlAssembly">
            <summary>
            The SqlAssembly class represents an assembly in the Microsoft .NET environment.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.SqlAssembly.Script">
            <summary>
            Generates a Transact-SQL script that can be used to re-create the SQL Server role
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.SqlAssembly.Script(ApexSql.Diff.SqlServer.ScriptingOptions)">
            <summary>
            Generates a Transact-SQL script that can be used to re-create/drop the SQL object.
            </summary>
            <param name="scriptingOptions">Scripting options.</param>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.SqlAssembly.AssemblySecurityLevel">
            <summary>
            Gets the security level for the assembly
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.SqlAssembly.CreateDate">
            <summary>
            Gets the date and time when the assembly was registered with the database.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.SqlAssembly.Culture">
            <summary>
            Gets the culture information about the referenced assembly.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.SqlAssembly.ExtendedProperties">
            <summary>
            Gets the extended properties of the role.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.SqlAssembly.ID">
            <summary>
            Gets the ID value that uniquely identifies the object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.SqlAssembly.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.SqlAssembly.IsVisible">
            <summary>
            Gets the Boolean property that specifies whether the assembly is visible after registration.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.SqlAssembly.Owner">
            <summary>
            Gets the user (principal) that is the owner of the referenced assembly.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.SqlAssembly.Parent">
            <summary>
            Gets the Database object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.SqlAssembly.PublicKey">
            <summary>
            Gets the public key of the referenced assembly.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.SqlAssembly.SqlAssemblyFiles">
            <summary>
            Gets the array of assembly file associated with the referenced assembly.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.SqlAssembly.Version">
            <summary>
            Gets the version value of the referenced assembly.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.LoginType">
            <summary>
            Authentication type and the Microsoft Windows account type
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.LoginType.AsymmetricKey">
            <summary>
            The logon is mapped to an asymmetric key
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.LoginType.Certificate">
            <summary>
            The logon is mapped to a certificate
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.LoginType.SqlLogin">
            <summary>
            A Microsoft SQL Server standard logon 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.LoginType.WindowsGroup">
            <summary>
            A Microsoft Windows group logon
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.LoginType.WindowsUser">
            <summary>
            A Microsoft Windows individual logon 
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.Check">
            <summary>
            The check constraint.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Check.Script">
            <summary>
            Generates a Transact-SQL script that can be used to re-create the SQL object.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Check.Script(ApexSql.Diff.SqlServer.ScriptingOptions)">
            <summary>
            Generates a Transact-SQL script that can be used to re-create/drop the SQL object.
            </summary>
            <param name="scriptingOptions">Scripting options.</param>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Check.CreateDate">
            <summary>
            Date and time when this check constraint was created.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Check.DateLastModified">
            <summary>
            Date and time when the check constraint was last modified.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Check.ExtendedProperties">
            <summary>
            Gets the extended properties of the object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Check.IsChecked">
            <summary>
            Gets the Boolean property value that specifies whether the constraint was enabled without checking existing rows, so constraint may not hold for all rows.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Check.IsEnabled">
            <summary>
            Gets the value that specifies whether the check constraint is enabled.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Check.IsSystemNamed">
            <summary>
            Gets the value that specifies whether the check constraint was named automatically by MSSQL or named by the database object creator.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Check.NotForReplication">
            <summary>
            Gets the value that specifies whether the check constraint is available for replication or not.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Check.Parent">
            <summary>
            Gets parent object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Check.Text">
            <summary>
            Gets the T-SQL statement that defines the check constraint
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Check.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.ScriptFolderInfo">
            <summary>
            Information about script folder to load as data source
            </summary>
        </member>
        <member name="M:ApexSql.Diff.ScriptFolderInfo.#ctor(System.String)">
            <summary>
            Creates and initializes script folder
            <param name="folderPath">Path to script folder</param>
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ScriptFolderInfo.FolderPath">
            <summary>
            Path to folder to load objects from.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.Schema">
            <summary>
            The Schema object represents an ownership context for a Microsoft SQL Server database object.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Schema.Script">
            <summary>
            Generates a Transact-SQL script that can be used to re-create the SQL Server object
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Schema.Script(ApexSql.Diff.SqlServer.ScriptingOptions)">
            <summary>
            Generates a Transact-SQL script that can be used to re-create/drop the SQL object.
            </summary>
            <param name="scriptingOptions">Scripting options.</param>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Schema.ID">
            <summary>
            Gets the ID value that uniquely identifies the schema.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Schema.ExtendedProperties">
            <summary>
            Gets the extended properties of the schema.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Schema.Owner">
            <summary>
            Gets the owner of the schema.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Schema.Parent">
            <summary>
            Gets the Database object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Schema.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.IndexedColumnCollection">
            <summary>
            Collection of IndexedColumn objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.ForeignKeyAction">
            <summary>
            The ForeignKeyAction enumeration is a list of constant values that specify the action taken when the primary key reference by a foreign key is updated.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ForeignKeyAction.Cascade">
            <summary>
            The modification is also made to the foreign key. 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ForeignKeyAction.NoAction">
            <summary>
            No action is taken.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ForeignKeyAction.SetDefault">
            <summary>
            The foreign key is set to the default value.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ForeignKeyAction.SetNull">
            <summary>
            The foreign key is set to null.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.ExtendedProperty">
            <summary>
            The ExtendedProperty object represents the extended properties that are defined for any object that has an ExtendedProperties collection property. 
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.ExtendedProperty.Script">
            <summary>
            Generates a Transact-SQL script that can be used to re-create the SQL Server object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.ExtendedProperty.Value">
            <summary>
            Gets the string value of the extended property.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.ExtendedProperty.Parent">
            <summary>
            Gets the SqlObjectBase object that is the parent of the ExtendedProperty object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.ExtendedProperty.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.CredentialCollection">
            <summary>
            Collection of Credential objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.Column">
            <summary>
            The Column object represents a Microsoft SQL Server column. 
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Column.AnsiPaddingStatus">
            <summary>
            Gets a Boolean property value that specifies whether the ANSI_PADDING_ENABLED column option is active or not.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Column.Collation">
            <summary>
            Gets the default collation used by the column.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Column.Computed">
            <summary>
            Gets the Boolean property value that specifies whether the column is the product of computed expression.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Column.ComputedText">
            <summary>
            Gets the Transact-SQL expression used to generate the value of a computed column.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Column.DataType">
            <summary>
            Gets the data type that is assigned to the column.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Column.Default">
            <summary>
            Default bound to this column.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Column.DefaultConstraint">
            <summary>
            Default value for this column.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Column.ExtendedProperties">
            <summary>
            Gets the extended properties of the object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Column.ID">
            <summary>
            Gets the column ID that uniquely identifies the column
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Column.Identity">
            <summary>
            Gets the Boolean property value that specifies whether the column is an identity column.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Column.IdentityIncrement">
            <summary>
            Gets the identity increment for an identity column.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Column.IdentitySeed">
            <summary>
            Gets the identity seed for an identity column.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Column.InPrimaryKey">
            <summary>
            Gets the Boolean property value that specifies whether the column is included in the definition of a primary key or unique key constraint.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Column.IsForeignKey">
            <summary>
            Gets the Boolean property value that specifies whether the column is a foreign key.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Column.IsFullTextIndexed">
            <summary>
            Gets the Boolean property value that specifies whether the column participates in a full-text index.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Column.IsPersisted">
            <summary>
            Gets the Boolean property value that specifies whether the computed value of the Column object is saved with the data, thus avoiding a computation each time the column is accessed.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Column.NotForReplication">
            <summary>
            Is this column participating in replication?
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Column.Nullable">
            <summary>
            Gets the Boolean property value that specifies whether the column can accept null values.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Column.Parent">
            <summary>
            Gets parent object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Column.RowGuidCol">
            <summary>
            Gets the Boolean property value that specifies whether the column contains a RowGuidCol value.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Column.Rule">
            <summary>
            Associated database rule.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Column.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Column.IsSparse">
            <summary>
            Gets the Boolean property value that specifies whether the column is sparse.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Column.IsColumnSet">
            <summary>
            Gets the Boolean property value that specifies whether the column represents column set.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.CheckCollection">
            <summary>
            Collection of Check objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.Broker.MessageTypeMappingCollection">
            <summary>
            Collection of MessageTypeMapping objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.Broker.MessageType">
            <summary>
            The MessageType object represents a message type that defines the content of messages.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Broker.MessageType.Script">
            <summary>
            Generates a Transact-SQL script that can be used to re-create the SQL object.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Broker.MessageType.Script(ApexSql.Diff.SqlServer.ScriptingOptions)">
            <summary>
            Generates a Transact-SQL script that can be used to re-create/drop the SQL object.
            </summary>
            <param name="scriptingOptions">Scripting options.</param>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.MessageType.Owner">
            <summary>
            Gets the owner of the service contract.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.MessageType.ExtendedProperties">
            <summary>
            Gets the extended properties of the user.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.MessageType.ID">
            <summary>
            Gets the ID value that uniquely identifies the database user.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.MessageType.Parent">
            <summary>
            Gets the Database object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.MessageType.MessageTypeValidation">
            <summary>
            Gets the type of validation performed on message body.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.MessageType.ValidationXmlSchemaCollection">
            <summary>
            Gets XmlSchemaCollection that is used to validate the messages. 
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.MessageType.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.Broker.BrokerServiceCollection">
            <summary>
            Collection of BrokerService objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.DatabaseCollection">
            <summary>
            Collection of Database objects.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DatabaseCollection.Item(System.String)">
            <summary>
            Returns the object by fully qualified name
            </summary>
            <param name="name">The fully qualified name of the object to get</param>
            <returns>The object if it was found, otherwise - null</returns>
        </member>
        <member name="T:ApexSql.Diff.Data.WhereClause">
            <summary>
            A WHERE clause used to filter rows
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.WhereClause.SourceFilter">
            <summary>
            The source WHERE filter
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.WhereClause.DestinationFilter">
            <summary>
            The destination WHERE filter
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.WhereClause.UseSourceFilterForDestination">
            <summary>
            Indicates whether source filter should be used for destination
            </summary>
        </member>
        <member name="M:ApexSql.Diff.CryptoAES.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="SecretPhrase">Secret phrase to generate key</param>
        </member>
        <member name="M:ApexSql.Diff.CryptoAES.Encrypt(System.String)">
            <summary>
            Encrypt the given value with the Rijndael algorithm.
            </summary>
            <param name="encryptValue">Value to encrypt</param>
            <returns>Encrypted value. </returns>
        </member>
        <member name="M:ApexSql.Diff.CryptoAES.Decrypt(System.String)">
            <summary>
            Decrypt the given value with the Rijndael algorithm.
            </summary>
            <param name="decryptValue">Value to decrypt</param>
            <returns>Encrypted value. </returns>
        </member>
        <member name="M:ApexSql.Diff.CryptoAES.GenerateKey">
            <summary>
            Generate an encryption key based on the given phrase.  The
            phrase is hashed to create a unique 32 character (256-bit)
            value, of which 24 characters (192 bit) are used for the
            key and the remaining 8 are used for the initialization vector (IV).
            </summary>
        </member>
        <member name="P:ApexSql.Diff.CryptoAES.Phrase">
            <value>Set the phrase used to generate the secret key.</value>
        </member>
        <member name="M:ApexSql.Diff.BothSynchronizationWizardOptions.#ctor(ApexSql.Diff.ProjectBase)">
            <summary>
            BothSynchronizationWizardOptions
            </summary>
            <param name="projectBase"></param>
        </member>
        <member name="M:ApexSql.Diff.BothSynchronizationWizardOptions.Clone(ApexSql.Diff.BothSynchronizationWizardOptions)">
            <summary>
            fill internal members from SyncWizardInfo objects
            </summary>
            <param name="swo">SyncWizardInfo object to copy from</param>
        </member>
        <member name="M:ApexSql.Diff.BothSynchronizationWizardOptions.GetAsXml">
            <summary>
            Get xml-string with serialized object
            </summary>
            <returns>xml-string with serialized object</returns>
        </member>
        <member name="M:ApexSql.Diff.BothSynchronizationWizardOptions.SetXml(System.String)">
            <summary>
            Set object properties by xml-string
            </summary>
            <param name="s">xml-string</param>
        </member>
        <member name="P:ApexSql.Diff.BothSynchronizationWizardOptions.AutoRecompare">
            <summary>
            Databases should be recompared after synchronization
            </summary>
        </member>
        <member name="P:ApexSql.Diff.BothSynchronizationWizardOptions.CurrentOutputAction">
            <summary>How to process generated script</summary>
        </member>
        <member name="P:ApexSql.Diff.BothSynchronizationWizardOptions.PreProcessing">
            <summary>Do PreProcessing</summary>
        </member>
        <member name="P:ApexSql.Diff.BothSynchronizationWizardOptions.DoPreProcessingInternal">
            <summary>Do PreProcessing from internal script</summary>
        </member>
        <member name="P:ApexSql.Diff.BothSynchronizationWizardOptions.PostProcessing">
            <summary>Do PostProcessing</summary>
        </member>
        <member name="P:ApexSql.Diff.BothSynchronizationWizardOptions.DoPostProcessingInternal">
            <summary>Do PreProcessing from internal script</summary>
        </member>
        <member name="P:ApexSql.Diff.BothSynchronizationWizardOptions.PostProcessingFile">
            <summary>PostProcessing File</summary>
        </member>
        <member name="P:ApexSql.Diff.BothSynchronizationWizardOptions.PreProcessingFile">
            <summary>PostProcessing File</summary>
        </member>
        <member name="P:ApexSql.Diff.BothSynchronizationWizardOptions.PostProcessingScript">
            <summary>PostProcessing Script</summary>
        </member>
        <member name="P:ApexSql.Diff.BothSynchronizationWizardOptions.PreProcessingScript">
            <summary>PreProcessing Script</summary>
        </member>
        <member name="P:ApexSql.Diff.BothSynchronizationWizardOptions.ScriptPath">
            <summary>Script path with filename</summary>
        </member>
        <member name="P:ApexSql.Diff.BothSynchronizationWizardOptions.UseScriptPath">
            <summary>Script path with filename</summary>
        </member>
        <member name="T:ApexSql.Diff.BothSynchronizationWizardOptions.OutputAction">
            <summary>
            OutputAction
            </summary>
        </member>
        <member name="F:ApexSql.Diff.BothSynchronizationWizardOptions.OutputAction.Display">
            <summary> Display script</summary>
        </member>
        <member name="F:ApexSql.Diff.BothSynchronizationWizardOptions.OutputAction.Write">
            <summary> Write script</summary>
        </member>
        <member name="F:ApexSql.Diff.BothSynchronizationWizardOptions.OutputAction.Execute">
            <summary> Execute script</summary>
        </member>
        <member name="T:ApexSql.Diff.BothSynchronizationWizardOptions.ProcessingType">
            <summary>
            OutputAction
            </summary>
        </member>
        <member name="F:ApexSql.Diff.BothSynchronizationWizardOptions.ProcessingType.None">
            <summary> Do nothing</summary>
        </member>
        <member name="F:ApexSql.Diff.BothSynchronizationWizardOptions.ProcessingType.Internal">
            <summary> Do use internal script</summary>
        </member>
        <member name="F:ApexSql.Diff.BothSynchronizationWizardOptions.ProcessingType.External">
            <summary> Do use external file</summary>
        </member>
        <member name="P:ApexSql.Diff.BothProject.Profile">
            <summary>Project filter</summary>
        </member>
        <member name="T:ApexSql.Diff.ProcessingType">
            <summary>
            The type of actions to do before and after processing of the synchronization script
            </summary>
        </member>
        <member name="F:ApexSql.Diff.ProcessingType.DonNotUse">
            <summary>
            Don't use Pre-/Postprocessing
            </summary>
        </member>
        <member name="F:ApexSql.Diff.ProcessingType.EmbeddedScript">
            <summary>
             Use embedded script
            </summary>
        </member>
        <member name="F:ApexSql.Diff.ProcessingType.ExternalScript">
            <summary>
             Open and use the script from the specified location
            </summary>
        </member>
        <member name="T:ApexSql.Diff.ProcessingScript">
            <summary>
            The actions to do before and after processing of the synchronization script
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ProcessingScript.ProcessingType">
            <summary>
            The type of actions to do before and after processing of the synchronization script
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ProcessingScript.EmbeddedScript">
            <summary>
            Embedded script
            </summary>
        </member>
        <member name="P:ApexSql.Diff.ProcessingScript.ExternalScriptPath">
            <summary>
            External script path
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SynchronizationOptionsBase">
            <summary>
            The base class for options used when synchronizing databases
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SynchronizationOptionsBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SynchronizationOptionsBase.ResetSynchronizationResult">
            <summary>
            Resets synchronization result
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SynchronizationOptionsBase.Author">
            <summary>
            The author information to place into the script
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SynchronizationOptionsBase.Legal">
            <summary>
            The legal information to place into the script
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SynchronizationOptionsBase.PreprocessingScript">
            <summary>
            The actions to do before processing of the synchronization script
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SynchronizationOptionsBase.PostprocessingScript">
            <summary>
            The actions to do after processing of the synchronization script
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SynchronizationOptionsBase.SynchronizationDirection">
            <summary>
            The synchronization direction 
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SynchronizationOptionsBase.Project">
            <summary>
            Core Project
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SynchronizationOptionsBase.TreatListAsExclude">
            <summary>
            Treat list of objects as exclude list
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SynchronizationOptionsBase.IncludeTransactionHandling">
            <summary>
            Include transaction handling in the script
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SynchronizationOptionsBase.IncludeScriptHeader">
            <summary>
            Include script header
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SynchronizationOptionsBase.IncludeComments">
            <summary>
            Include comments
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SynchronizationOptionsBase.IncludePrintStatements">
            <summary>
            Include print statements
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SynchronizationOptionsBase.Backup">
            <summary>
            Is it neccessary to make backup
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SynchronizationOptionsBase.BackupPath">
            <summary>
            The path for the backup
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.UserType">
            <summary>
            User security type
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.UserType.AsymmetricKey">
            <summary>
            The user type is an asymmetric key
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.UserType.Certificate">
            <summary>
            The user type is a certificate
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.UserType.NoLogin">
            <summary>
            No login
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.UserType.SqlLogin">
            <summary>
            The user type is a MSSQL logon
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.SecondaryXmlIndexType">
            <summary>
            The SecondaryXmlIndexType enumeration contains values that are used to specify the secondary XML index type.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SecondaryXmlIndexType.None">
            <summary>
            There is no secondary XML index. 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SecondaryXmlIndexType.Path">
            <summary>
            The secondary XML index is a path.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SecondaryXmlIndexType.Property">
            <summary>
            The secondary XML index is a property.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SecondaryXmlIndexType.Value">
            <summary>
            The secondary XML index is a value.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.CompatibilityLevel">
            <summary>
            Behavior type that corresponds to a version of MSSQL.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.CompatibilityLevel.Version60">
            <summary>
            Microsoft SQL Server 6.0 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.CompatibilityLevel.Version65">
            <summary>
            Microsoft SQL Server 6.5 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.CompatibilityLevel.Version70">
            <summary>
            Microsoft SQL Server 7.0
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.CompatibilityLevel.Version80">
            <summary>
            Microsoft SQL Server 2000 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.CompatibilityLevel.Version90">
            <summary>
            Microsoft SQL Server 2005 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.CompatibilityLevel.Version100">
            <summary>
            Microsoft SQL Server 2008 
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.DatabaseStatus">
            <summary>
            The DatabaseStatus enumeration is a list of constant values that specify the status of a database, whether it be loading, recovering, or normal, for example. This enumeration has a FlagsAttribute attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.DatabaseStatus.EmergencyMode">
            <summary>
            The database is in emergency mode
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.DatabaseStatus.Normal">
            <summary>
            The database is available.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.DatabaseStatus.Offline">
            <summary>
            The database has been taken offline.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.DatabaseStatus.Recovering">
            <summary>
            The database is going through the recovery process.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.DatabaseStatus.Restoring">
            <summary>
            The database is going through the restore process.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.DatabaseStatus.Suspect">
            <summary>
            The database has been marked as suspect. The data will need to be checked and the database might need to be restored from a backup.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.Database">
            <summary>
            Database in SQL server. Top-level for reading meta-data.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.Database.isDataMode">
            <summary> Database</summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Database.ConnectToDb">
            <summary>
            Connect to database or load snapshot.
            </summary>
            <exception cref="T:ApexSql.Diff.InvalidConnectionException">Occurs when connection failed</exception>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.Name">
            <summary>
            Object name accessor.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.QualifiedName">
            <summary>
            Gets the fully qualified name of object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.Roles">
            <summary>
            Represents a collection of Role objects. Each Role object represents an database or application role defined on the database.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.Users">
            <summary>
            Represents a collection of User objects. Each User object represents an user defined on the database.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.EventNotifications">
            <summary>/// Represents a collection of EventNotification objects.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.Assemblies">
            <summary>
            Represents a collection of SqlAssembly objects.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.Credentials">
            <summary>
            Represents a collection of Credential objects.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.FullTextCatalogs">
            <summary>
            Represents a collection of FullTextCatalog objects.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.DdlTriggers">
            <summary>
            Represents a collection of Ddl trigger objects.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.XmlSchemaCollections">
            <summary>
            Represents a collection of XmlSchemaCollection objects.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.PartitionFunctions">
            <summary>
            Represents a collection of PartitionFunction objects.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.PartitionSchemes">
            <summary>
            Represents a collection of PartitionScheme objects.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.Synonyms">
            <summary>
            Represents a collection of Synonym objects.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.Triggers">
            <summary>
            Represents a collection of Trigger objects.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.Schemas">
            <summary>
            Represents a collection of Schema objects.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.Defaults">
            <summary>
            Represents a collection of Default objects.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.Rules">
            <summary>
            Represents a collection of Rule objects.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.UserDefinedDataTypes">
            <summary>
            Represents a collection of UserDefinedDataType objects.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.UserDefinedFunctions">
            <summary>
            Represents a collection of UserDefinedFunction objects.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.StoredProcedures">
            <summary>
            Represents a collection of StoredProcedure objects.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.Tables">
            <summary>
            Represents a collection of Table objects.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.Views">
            <summary>
            Represents a collection of View objects.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.FileGroups">
            <summary>
            Represents a collection of FileGroup objects.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.ServiceBroker">
            <summary>
            Gets a Service Broker on a Microsoft SQL Server database.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.ConnectionProperties">
            <summary>
            Returns copy of connection properties used to connect to the database.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.AutoCreateStatisticsEnabled">
            <summary>
            Is AUTO_CREATE_STATISTICS set to ON
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.AutoUpdateStatisticsEnabled">
            <summary>
            Is AUTO_UPDATE_STATISTICS set to ON
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.IsFullTextEnabled">
            <summary>
            Is FullTextEnabled set to ON.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.IsUpdateable">
            <summary>
            Whether database is updateable.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.Status">
            <summary>
            Gets the database status.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.Collation">
            <summary>
            The collation of the database
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.CaseSensitive">
            <summary>
            Is database case sensitive
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.IsSystemObject">
            <summary>
            Whether database is system.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.Owner">
            <summary>
            Gets the database principal that is the owner of the database. 
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.Version">
            <summary>
            Gets the version of SQL Server that was used to create the database. 
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.CreateDate">
            <summary>
            The DateTime when database created
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Database.CompatibilityLevel">
            <summary>
            Behavior type that corresponds to a version of MSSQL
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.ActivationExecutionContext">
            <summary>
            The ActivationExecutionContext enumeration contains values that are used to specify the security context used by a procedure activated by the ServiceQueue object.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ActivationExecutionContext.ExecuteAsUser">
            <summary>
            The activated procedure is executed with the security context of a specified user.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ActivationExecutionContext.Owner">
            <summary>
            The activated procedure is executed with the security context of the ServiceQueue object owner.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ActivationExecutionContext.Self">
            <summary>
            The activated procedure is executed with the security context of the ServiceQueue object.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Data.DataSynchronizationOptions">
            <summary>
            Options used when synchronizing databases
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataSynchronizationOptions.DisableForeignKeysAndTriggers">
            <summary>
            Disable foreign keys and triggers
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataSynchronizationOptions.DropNotUniqueIndexes">
            <summary>
            Drop not unique indexes
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataSynchronizationOptions.DisableCheckConstraints">
            <summary>
            Disable check constraints
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataSynchronizationOptions.DateTimeFormat">
            <summary>
            The DateTime format
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataSynchronizationOptions.ApplyDateFormat">
            <summary>
            Apply <see cref="P:ApexSql.Diff.Data.DataSynchronizationOptions.DateTimeFormat">date format</see>
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataSynchronizationOptions.BatchingType">
            <summary>
            The type of batching 
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataSynchronizationOptions.RowsPerBatch">
            <summary>
            The number of rows per batch
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataSynchronizationOptions.SynchronizeDifferentRows">
            <summary>
            Synchronize different rows
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataSynchronizationOptions.SynchronizeMissingRows">
            <summary>
            Synchronize missing only rows
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataSynchronizationOptions.SynchronizeAdditionalRows">
            <summary>
            Synchronize additional only rows
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Data.BatchingType">
            <summary>
            A batching type
            </summary>
        </member>
        <member name="F:ApexSql.Diff.Data.BatchingType.NoBatches">
            <summary>
            No batches
            </summary>
        </member>
        <member name="F:ApexSql.Diff.Data.BatchingType.OneBatch">
            <summary>
            One batch per script
            </summary>
        </member>
        <member name="F:ApexSql.Diff.Data.BatchingType.BatchAfterNRows">
            <summary>
            Insert batch after each RowsPerBatch rows
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Data.MappedKeyCollection">
            <summary>
            Collection of mapped keys
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Data.MappedKeyCollection.GetItemBySourceName(System.String)">
            <summary>
            Search a key in the collection by the source key's name
            </summary>
            <param name="name">The name of an key</param>
            <returns>The found mapped key or null if a key was not found</returns>
        </member>
        <member name="M:ApexSql.Diff.Data.MappedKeyCollection.GetItemByDestinationName(System.String)">
            <summary>
            Search a key in the collection by the destination key's name
            </summary>
            <param name="name">The name of an key</param>
            <returns>The found mapped key or null if a key was not found</returns>
        </member>
        <member name="M:ApexSql.Diff.Data.MappedKeyCollection.System#Collections#Generic#IEnumerable{ApexSql#Diff#Data#MappedKey}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:ApexSql.Diff.Data.MappedKeyCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:ApexSql.Diff.Data.MappedKeyCollection.Count">
            <summary>
            Count of mapped keys
            </summary>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.Data.MappedKeyCollection.Item(System.Int32)">
            <summary>
            Returns a mapped key
            </summary>
            <param name="index">The zero-based index of the element to get</param>
            <returns>The mapped key at the specified index, otherwise - null</returns>
        </member>
        <member name="T:ApexSql.Diff.ApiLicenseProvider">
            <summary>
            Provides an implementation of a System.ComponentModel.LicenseProvider. The
                provider works in a similar fashion to the Microsoft .NET Framework standard
                licensing model.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.ApiLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
            <summary>
            Returns a license for the instance of the component, if one is available.
            </summary>
            <param name="context">A System.ComponentModel.LicenseContext that specifies where you can use the licensed object.</param>
            <param name="type">A System.Type that represents the component requesting the System.ComponentModel.License.</param>
            <param name="instance">An object that requests the System.ComponentModel.License.</param>
            <param name="allowExceptions">true if a System.ComponentModel.LicenseException should be thrown when a component cannot be granted a license; otherwise, false.</param>
            <returns>A valid System.ComponentModel.License. If this method cannot find a valid System.ComponentModel.License or a valid context parameter, it returns null.</returns>
        </member>
        <member name="T:ApexSql.Diff.ApiLicenseProvider.ApiLicense">
            <summary>
            Api license
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.StructureProject">
            <summary>
            A structure project
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Structure.StructureProject.#ctor(System.String)">
            <summary>
            Construct structure project from the project file
            </summary>
            <param name="projectFilePath">The path to the project file</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.StructureProject.#ctor(ApexSql.Diff.ConnectionProperties,ApexSql.Diff.ConnectionProperties)">
            <summary>
            Construct project with two databases as source data source and destination data sources
            </summary>
            <param name="sourceConnection">The connection properties for the source data source</param>
            <param name="destinationConnection">The connection properties for the destination data source</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.StructureProject.#ctor(System.String,ApexSql.Diff.ConnectionProperties)">
            <summary>
            Construct project with snapshot as source data source and database as destination data source
            </summary>
            <param name="snapshotFilepath">The path for source snapshot</param>
            <param name="destinationConnection">The connection properties for the destination data source</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.StructureProject.#ctor(ApexSql.Diff.ConnectionProperties,System.String)">
            <summary>
            Construct project with database as source data source and snapshot as destination data source
            </summary>
            <param name="sourceConnection">The connection properties for the source data source</param>
            <param name="snapshotFilepath">The path for the destination snapshot</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.StructureProject.#ctor(System.String,System.String)">
            <summary>
            Construct project with two snapshots as source data source and destination data source
            </summary>
            <param name="sourceSnapshotFilepath">The path for the source snapshot</param>
            <param name="destinationSnapshotFilepath">The path for the destination snapshot</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.StructureProject.#ctor(ApexSql.Diff.ScriptFolderInfo,ApexSql.Diff.ConnectionProperties,ApexSql.Diff.Structure.FolderMapping)">
            <summary>
            Construct project with script folder as source data source and database as destination data source
            </summary>
            <param name="sourceScriptFolderInfo">The path for the source script folder</param>
            <param name="destinationConnection">The path for the destination database</param>
            <param name="folderMapping">Name of file with folder mapping settings (null for using default mapping)</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.StructureProject.#ctor(ApexSql.Diff.ConnectionProperties,ApexSql.Diff.ScriptFolderInfo,ApexSql.Diff.Structure.FolderMapping)">
            <summary>
            Construct project with script folder as source data source and database as destination data source
            </summary>
            <param name="sourceConnection">The path for the destination database</param>
            <param name="destinationScrptFolderInfo">The path for the source script folder</param>
            <param name="folderMapping">Name of file with folder mapping settings (null for using default mapping)</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.StructureProject.#ctor(ApexSql.Diff.ScriptFolderInfo,System.String,ApexSql.Diff.Structure.FolderMapping)">
            <summary>
            Construct project with script folder as source data source and snapshot as destination data source
            </summary>
            <param name="sourceScriptFolderInfo">The path for the source script folder</param>
            <param name="destinationSnapshotFilepath">The path for the destination snapshot</param>
            <param name="folderMapping">Name of file with folder mapping settings (null for using default mapping)</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.StructureProject.#ctor(System.String,ApexSql.Diff.ScriptFolderInfo,ApexSql.Diff.Structure.FolderMapping)">
            <summary>
            Construct project with snapshot as source data source and script folder as destination data source
            </summary>
            <param name="sourceSnapshotFilepath">The path for the source snapshot</param>
            <param name="destinationScriptFolderInfo">The path for the destination script folder</param>
            <param name="folderMapping">Name of file with folder mapping settings (null for using default mapping)</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.StructureProject.#ctor(ApexSql.Diff.ScriptFolderInfo,ApexSql.Diff.ScriptFolderInfo,ApexSql.Diff.Structure.FolderMapping)">
            <summary>
            Construct project with script folders as source data source and destination data source
            </summary>
            <param name="sourceScriptFolderInfo">The path for the source script folder</param>
            <param name="destinationScriptFolderInfo">The path for the destination script folder</param>
            <param name="folderMapping">Name of file with folder mapping settings (null for using default mapping)</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.StructureProject.#ctor(ApexSql.Diff.ScriptFolderInfo,ApexSql.Diff.SourceControlFolderInfo,ApexSql.Diff.Structure.FolderMapping)">
            <summary>
            Construct project with script folder as source data source and source control folder as destination data source
            </summary>
            <param name="sourceScriptFolderInfo">The path for the source script folder</param>
            <param name="destinationSourceControlFolder">The path for the destination snapshot</param>
            <param name="folderMapping">Name of file with folder mapping settings (null for using default mapping)</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.StructureProject.#ctor(ApexSql.Diff.SourceControlFolderInfo,ApexSql.Diff.ConnectionProperties,ApexSql.Diff.Structure.FolderMapping)">
            <summary>
            Construct project with source control folder as source data source and database as destination data source
            </summary>
            <param name="sourceSCFolderInfo">The path for the source source control folder</param>
            <param name="destinationConnection">The path for the destination database</param>
            <param name="folderMapping">Name of file with folder mapping settings (null for using default mapping)</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.StructureProject.#ctor(ApexSql.Diff.ConnectionProperties,ApexSql.Diff.SourceControlFolderInfo,ApexSql.Diff.Structure.FolderMapping)">
            <summary>
            Construct project with database as source data source and source control folder as destination data source
            </summary>
            <param name="sourceConnection">The path for the source source control folder</param>
            <param name="destinationSCFolderInfo">The path for the destination database</param>
            <param name="folderMapping">Name of file with folder mapping settings (null for using default mapping)</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.StructureProject.#ctor(ApexSql.Diff.SourceControlFolderInfo,System.String,ApexSql.Diff.Structure.FolderMapping)">
            <summary>
            Construct project with source control folder as source data source and snapshot as destination data source
            </summary>
            <param name="sourceSCFolderInfo">The path for the source source control folder</param>
            <param name="destinationSnapshotFilepath">The path for the destination snapshot</param>
            <param name="folderMapping">Name of file with folder mapping settings (null for using default mapping)</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.StructureProject.#ctor(System.String,ApexSql.Diff.SourceControlFolderInfo,ApexSql.Diff.Structure.FolderMapping)">
            <summary>
            Construct project with snapshot as source data source and source control folder as destination data source
            </summary>
            <param name="sourceSnapshotFilepath">The path for the source source control folder</param>
            <param name="destinationSCFolderInfo">The path for the destination snapshot</param>
            <param name="folderMapping">Name of file with folder mapping settings (null for using default mapping)</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.StructureProject.#ctor(ApexSql.Diff.SourceControlFolderInfo,ApexSql.Diff.ScriptFolderInfo,ApexSql.Diff.Structure.FolderMapping)">
            <summary>
            Construct project with source control folder as source data source and script folder as destination data source
            </summary>
            <param name="sourceSCFolderInfo">The path for the source source control folder</param>
            <param name="destinationScriptFolderInfo">The path for the destination script folder</param>
            <param name="folderMapping">Name of file with folder mapping settings (null for using default mapping)</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.StructureProject.#ctor(ApexSql.Diff.SourceControlFolderInfo,ApexSql.Diff.SourceControlFolderInfo,ApexSql.Diff.Structure.FolderMapping)">
            <summary>
            Construct project with two snapshots as source data source and destination data source
            </summary>
            <param name="sourceSCFolderInfo">The path for the source script folder</param>
            <param name="destinationSCFolderInfo">The path for the destination script folder</param>
            <param name="folderMapping">Name of file with folder mapping settings (null for using default mapping)</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.StructureProject.SetSourceDataSource(ApexSql.Diff.ConnectionProperties)">
            <summary>
            Set database as new source data source
            </summary>
            <param name="connectionProperties">The connection properties for the source data source</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.StructureProject.SetSourceDataSource(System.String)">
            <summary>
            Set snapshot as new source data source
            </summary>
            <param name="snapshotFilepath">The path for the snapshot</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.StructureProject.SetSourceDataSource(ApexSql.Diff.ScriptFolderInfo)">
            <summary>
            Set script folder as new source data source
            </summary>
            <param name="scriptFolderInfo">The ScriptFolderInfo for the source data source</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.StructureProject.SetSourceDataSource(ApexSql.Diff.SourceControlFolderInfo)">
            <summary>
            Set script folder as new source data source
            </summary>
            <param name="sourceControlFolderInfo">The ScriptFolderInfo for the source data source</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.StructureProject.SetDestinationDataSource(ApexSql.Diff.ConnectionProperties)">
            <summary>
            Set database as new destination data source
            </summary>
            <param name="connectionProperties">The connection properties</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.StructureProject.SetDestinationDataSource(System.String)">
            <summary>
            Set snapshot as new destination data source
            </summary>
            <param name="snapshotFilepath">The connection properties</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.StructureProject.SetDestinationDataSource(ApexSql.Diff.ScriptFolderInfo)">
            <summary>
            Set script folder as new destination data source
            </summary>
            <param name="scriptFolderInfo">The ScriptFolderInfo for the destination data source</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.StructureProject.SetDestinationDataSource(ApexSql.Diff.SourceControlFolderInfo)">
            <summary>
            Set script folder as new destination data source
            </summary>
            <param name="sourceControlFolderInfo">The ScriptFolderInfo for the destination data source</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.StructureProject.GetSourceDataSource">
            <summary>
            Gets source data source
            </summary>
            <returns>Source data source</returns>
        </member>
        <member name="M:ApexSql.Diff.Structure.StructureProject.GetDestinationDataSource">
            <summary>
            Gets destination data source
            </summary> 
            <returns>Destination data source</returns>
        </member>
        <member name="M:ApexSql.Diff.Structure.StructureProject.ResetDataSources">
            <summary>
            Resets data source
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Structure.StructureProject.UpdateRecentProjectNameList(System.String)">
            <summary>
            Update list of recent used project files
            </summary>
            <param name="name">project file name</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.StructureProject.PreLoadCatalog">
            <summary>
            Action that are called before catalog is loaded
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Structure.StructureProject.AfterLoadCatalog">
            <summary>
            Action that are called after catalog is loaded
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Structure.StructureProject.GenerateXmlReport(System.String)">
            <summary>
            Generate XML report
            </summary>
            <param name="filePath">The file path to save report to</param>
            <exception cref="T:ApexSql.Diff.CancelException">Occurs when user cancel operation</exception>
            <exception cref="T:ApexSql.Diff.FileIOException">Occurs when file operation is failed</exception>
            <exception cref="T:ApexSql.Diff.UnhandledException">Occurs when unexpected error was appeared</exception>
            <exception cref="T:ApexSql.Diff.FileIOException">Occurs when incorrect filePath parameter is specified</exception>
        </member>
        <member name="M:ApexSql.Diff.Structure.StructureProject.Clone">
            <summary>
            Clone this project
            </summary>
            <returns>The project cloned</returns>
        </member>
        <member name="M:ApexSql.Diff.Structure.StructureProject.SetFolderMapping(ApexSql.Diff.Structure.FolderMapping)">
            <summary>
            Loads folder mapping from specified file and applies to the project.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.SourceDataSource">
            <summary>
            The source data source
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.DestinationDataSource">
            <summary>
            The destination data source
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.IsSourceDatabase">
            <summary>
            Is source data source a database
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.IsDestinationDatabase">
            <summary>
            Is destination data source a database
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.SourceSnapshotPath">
            <summary>
            Gets source snapshot path.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.DestinationSnapshotPath">
            <summary>
            Gets destination snapshot path.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.SourceConnectionProperties">
            <summary>
            Gets source connection properties.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.DestinationConnectionProperties">
            <summary>
            Gets destination connection properties.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.StoreSourceEncryptedPassword">
            <summary>
            Whether source password is stored in encrypted form.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.StoreDestinationEncryptedPassword">
            <summary>
            Whether destination password stores in encrypted form.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.OwnerMapping">
            <summary>
            The owner mapping or schema mapping
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.OwnerFilter">
            <summary>
            The owner filter settings (used with MSSQL 2000)
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.ComparisonOptions">
            <summary>
            The options used when comparing databases
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.SynchronizationOptions">
            <summary>
            The options used when synchronizing databases
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.HtmlReportOptions">
            <summary>
            The options used when generating HTML report
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.ObjectTypeFilter">
            <summary>
            The object types to load
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.Summaries">
            <summary>
            The collection of summaries
            </summary>
            <exception cref="T:ApexSql.Diff.CancelException">Occurs when user cancel script generation if it doesn't exists yet</exception>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.Warnings">
            <summary>
            The collection of warnings
            </summary>
            <exception cref="T:ApexSql.Diff.CancelException">Occurs when user cancel script generation if it doesn't exists yet</exception>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.MappedObjects">
            <summary>
            The collection of mapped objects
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.MappedDefaults">
            <summary>
            The collection of mapped defaults
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.MappedProcedures">
            <summary>
            The collection of mapped procedures
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.MappedRoles">
            <summary>
            The collection of mapped roles
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.MappedRules">
            <summary>
            The collection of mapped rules
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.MappedTables">
            <summary>
            The collection of mapped tables
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.MappedUsers">
            <summary>
            The collection of mapped users
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.MappedUserDataTypes">
            <summary>
            The collection of mapped user data types
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.MappedFunctions">
            <summary>
            The collection of mapped functions
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.MappedViews">
            <summary>
            The collection of mapped views
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.MappedAssemblies">
            <summary>
            The collection of mapped assemblies
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.MappedContracts">
            <summary>
            The collection of mapped contracts
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.MappedCredentials">
            <summary>
            The collection of mapped credentials
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.MappedDdlTriggers">
            <summary>
            The collection of mapped DDL triggers
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.MappedEventNotifications">
            <summary>
            The collection of mapped event notifications
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.MappedFulltextCatalogs">
            <summary>
            The collection of mapped fulltext catalogs
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.MappedMessageTypes">
            <summary>
            The collection of mapped message types
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.MappedQueues">
            <summary>
            The collection of mapped queues
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.MappedPartitionFunctions">
            <summary>
            The collection of mapped partition functions
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.MappedPartitionSchemes">
            <summary>
            The collection of mapped partition schemes
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.MappedRemoteServiceBindings">
            <summary>
            The collection of mapped remote service bindings
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.MappedRoutes">
            <summary>
            The collection of mapped routes
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.MappedSchemas">
            <summary>
            The collection of collection of mapped schemas
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.MappedServices">
            <summary>
            The collection of mapped services
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.MappedSynonyms">
            <summary>
            The collection of mapped synonyms
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.MappedTriggers">
            <summary>
            The collection of mapped triggers
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.MappedXmlSchemaCollections">
            <summary>
            The collection of mapped xml schema collections
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.ComparedObjects">
            <summary>
            The collection of compared objects
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.ComparedDefaults">
            <summary>
            The collection of compared defaults
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.ComparedProcedures">
            <summary>
            The collection of compared procedures
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.ComparedRoles">
            <summary>
            The collection of compared roles
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.ComparedRules">
            <summary>
            The collection of compared rules
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.ComparedTables">
            <summary>
            The collection of compared tables
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.ComparedUsers">
            <summary>
            The collection of compared users
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.ComparedDataTypes">
            <summary>
            The collection of compared user data types
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.ComparedFunctions">
            <summary>
            The collection of compared functions
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.ComparedViews">
            <summary>
            The collection of compared views
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.ComparedAssemblies">
            <summary>
            The collection of compared assemblies
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.ComparedContracts">
            <summary>
            The collection of compared contracts
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.ComparedCredentials">
            <summary>
            The collection of compared credentials
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.ComparedDdlTriggers">
            <summary>
            The collection of compared DDL triggers
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.ComparedEventNotifications">
            <summary>
            The collection of compared event notifications
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.ComparedFulltextCatalogs">
            <summary>
            The collection of compared fulltext catalogs
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.ComparedMessageTypes">
            <summary>
            The collection of compared message types
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.ComparedQueues">
            <summary>
            The collection of compared queues
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.ComparedPartitionFunctions">
            <summary>
            The collection of compared partition functions
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.ComparedPartitionSchemes">
            <summary>
            The collection of compared partition schemes
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.ComparedRemoteServiceBindings">
            <summary>
            The collection of compared remote service bindings
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.ComparedRoutes">
            <summary>
            The collection of compared routes
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.ComparedSchemas">
            <summary>
            The collection of compared schemas
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.ComparedServices">
            <summary>
            The collection of compared services
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.ComparedSynonyms">
            <summary>
            The collection of compared synonyms
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.ComparedTriggers">
            <summary>
            The collection of compared triggers
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.ComparedXmlSchemaCollections">
            <summary>
            The collection of compared xml schema collections
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.StructureProject.CaseSensitive">
            <summary>
            If search of database objects should be case sensitive.
            </summary>
            <summary>
            The logic is: if at least one datasource is case sensitive
            then search should be case sensitive for all objects, otherwise
            (if both databases are case insensitive) search should be case insensitive.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ApexSql.Diff.Structure.MappedObjectCollection">
            <summary>
            A collection of mapped objects
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Structure.MappedObjectCollection.CreateObject(System.Object)">
            <summary>Create object from IMatchedObject</summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.MappedObjectCollection.ObjectType">
            <summary>
            The ObjectType of the object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.MappedObjectCollection.CountToCompare">
            <summary>
            Count of objects to compare
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.MappedObjectCollection.Item(System.Int32)">
            <summary>
            Returns a mapped object
            </summary>
            <param name="index">The zero-based index of the element to get</param>
            <returns>The mapped object at the specified index, otherwise - null</returns>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.ViewCollection">
            <summary>
            Collection of View objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.UserDefinedFunctionType">
            <summary>
            The UserDefinedFunctionType enumeration is a list of constant values that specify the types of user-defined functions supported by Microsoft SQL Server.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.UserDefinedFunctionType.Inline">
            <summary>
            An inline function.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.UserDefinedFunctionType.Scalar">
            <summary>
            A scalar function.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.UserDefinedFunctionType.Table">
            <summary>
            A table function.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.UserDefinedFunctionType.Aggregate">
            <summary>
            Aggregate function.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.UserDefinedFunctionType.Unknown">
            <summary>
            The function type is unknown.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.SynonymCollection">
            <summary>
            Collection of Synonym objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.Role">
            <summary>
            The Role object represents a Microsoft SQL Server database or application role. 
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Role.EnumMembers">
            <summary>
            The users and roles in the role
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Role.Script">
            <summary>
            Generates a Transact-SQL script that can be used to re-create the SQL Server role
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Role.Script(ApexSql.Diff.SqlServer.ScriptingOptions)">
            <summary>
            Generates a Transact-SQL script that can be used to re-create/drop the SQL object.
            </summary>
            <param name="scriptingOptions">Scripting options.</param>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Role.DateLastModified">
            <summary>
            Gets the date and time when the role was last modified.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Role.CreateDate">
            <summary>
            Gets the date and time when the role was created.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Role.ID">
            <summary>
            Gets the ID value that uniquely identifies the role.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Role.ExtendedProperties">
            <summary>
            Gets the extended properties of the role.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Role.IsFixedRole">
            <summary>
            Is a fixed role or a user-defined role.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Role.Owner">
            <summary>
            Gets the owner of the role.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Role.Parent">
            <summary>
            Gets the Database object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Role.IsApplicationRole">
            <summary>
            Is this an application role
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Role.DefaultSchema">
            <summary>
            The application role default schema. Empty if the role is not an application role 
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Role.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.PartitionSchemeCollection">
            <summary>
            Collection of PartitionScheme objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.FullTextIndexColumnCollection">
            <summary>
            Collection of FullTextIndexColumn objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.FullTextCatalog">
            <summary>
            The FullTextCatalog object represents a Microsoft Search full-text catalog.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.FullTextCatalog.Script">
            <summary>
            Generates a Transact-SQL script that can be used to re-create the SQL object.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.FullTextCatalog.Script(ApexSql.Diff.SqlServer.ScriptingOptions)">
            <summary>
            Generates a Transact-SQL script that can be used to re-create/drop the SQL object.
            </summary>
            <param name="scriptingOptions">Scripting options.</param>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FullTextCatalog.ErrorLogSize">
            <summary>
            Size of the error log.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FullTextCatalog.FileGroup">
            <summary>
            File group on which this catalog resides.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FullTextCatalog.FullTextIndexSize">
            <summary>
            Size of the full-text index.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FullTextCatalog.HasFullTextIndexedTables">
            <summary>
            Specifies whether the full-text catalog is used by at least one table for index data storage.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FullTextCatalog.IsAccentSensitive">
            <summary>
            Specifies whether the referenced full-text catalog is accent sensitive.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FullTextCatalog.IsDefault">
            <summary>
            Specifies whether the referenced full-text catalog is the default catalog for full-text index creation.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FullTextCatalog.ItemCount">
            <summary>
            Total number of full-text indexed rows in the catalog.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FullTextCatalog.Owner">
            <summary>
            Gets the owner of the full-text catalog.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FullTextCatalog.ID">
            <summary>
            Gets the ID value that uniquely identifies the database user.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FullTextCatalog.PopulationCompletionAge">
            <summary>
            Time since the last successful full-text catalog population
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FullTextCatalog.Parent">
            <summary>
            Gets the Database object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FullTextCatalog.PopulationCompletionDate">
            <summary>
            Date and time of the last successful full-text catalog population.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FullTextCatalog.RootPath">
            <summary>
            Path to the operating system directory that is used as the primary path for MicrosoftSearch full-text catalog storage.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FullTextCatalog.UniqueKeyCount">
            <summary>
            Path to the operating system directory that is used as the primary path for MicrosoftSearch full-text catalog storage.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FullTextCatalog.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.EventNotificationCollection">
            <summary>
            Collection of EventNotification objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.Broker.MessageSource">
            <summary>
            The MessageSource enumeration contains constant values that specify which endpoint sent the message.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.Broker.MessageSource.Initiator">
            <summary>
            Specifies the message was sent by the dialog initiator endpoint.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.Broker.MessageSource.InitiatorAndTarget">
            <summary>
            Specifies the message was sent by either the initiator endpoint or the target endpoint. 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.Broker.MessageSource.Target">
            <summary>
            Specifies the message was sent by the target endpoint.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.AssemblySecurityLevel">
            <summary>
            The AssemblySecurityLevel enumeration contains values that are used to specify the access rights for an assembly.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.AssemblySecurityLevel.Safe">
            <summary>
            Only safe access to the assembly is permitted.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.AssemblySecurityLevel.External">
            <summary>
            External access to the assembly is permitted.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.AssemblySecurityLevel.Unrestricted">
            <summary>
            Unrestricted access to the assembly is permitted.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.Broker.ServiceBroker">
            <summary>
            The ServiceBroker object represents an implementation of Service Broker on a Microsoft SQL Server database. 
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceBroker.Parent">
            <summary>
            Gets the Database object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceBroker.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceBroker.ServiceContracts">
            <summary>
            Represents a collection of ServiceContract objects.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceBroker.RemoteServiceBindings">
            <summary>
            Represents a collection of RemoteServiceBinding objects.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceBroker.Routes">
            <summary>
            Represents a collection of ServiceRoute objects.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceBroker.Services">
            <summary>
            Represents a collection of BrokerService objects.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceBroker.Queues">
            <summary>
            Represents a collection of ServiceQueue objects.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.ServiceBroker.MessageTypes">
            <summary>
            Represents a collection of MessageType objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.OwnerMappingItem">
            <summary>
            An owner/schema mapping item
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Structure.OwnerMappingItem.#ctor(System.String,System.String)">
            <summary>
            Add owner/schema mapping
            </summary>
            <param name="sourceOwner">The owner/schema in the source data source</param>
            <param name="destinationOwner">The owner/schema in the destination data source</param>
        </member>
        <member name="P:ApexSql.Diff.Structure.OwnerMappingItem.SourceOwner">
            <summary>
            The owner in source data source
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.OwnerMappingItem.DestinationOwner">
            <summary>
            The owner in destination data source
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.OwnerMapping">
            <summary>
            An owner/schema mapping
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Structure.OwnerMapping.ResetMappedCollections">
            <summary>
            Reset Mapped Collections
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Structure.OwnerMapping.Clear">
            <summary>
            Clear owner/schema mapping
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Structure.OwnerMapping.LoadProfile(System.String)">
            <summary>
            Load owner/schema mapping profile
            </summary>
            <param name="ownerMappingPath">The path to owner mapping file</param>
            <exception cref="T:ApexSql.Diff.FileIOException">Occurs when operation cancelled</exception>
        </member>
        <member name="M:ApexSql.Diff.Structure.OwnerMapping.SaveProfile(System.String)">
            <summary>
            Save owner/schema mapping profile
            </summary>
            <param name="ownerMappingPath">The path to owner mapping file</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.OwnerMapping.AddMapping(System.String,System.String)">
            <summary>
            Add owner/schema mapping
            </summary>
            <param name="sourceOwner">The owner in the source data source</param>
            <param name="destinationOwner">The owner in the destination data source</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.OwnerMapping.RemoveMapping(System.String,System.String)">
            <summary>
            Remove all mapping item with a specified source owner/schema
            </summary>
            <param name="sourceOwner">The owner in the owner/schema in source data source</param>
            <param name="destinationOwner">The owner in the owner/schema in destination data source</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.OwnerMapping.RemoveMappingBySourceOwner(System.String)">
            <summary>
            Remove all mapping for a specified source owner/schema
            </summary>
            <param name="owner">The owner/schema in the source data source</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.OwnerMapping.RemoveMappingByDestinationOwner(System.String)">
            <summary>
            Remove all mapping for a specified destination owner/schema
            </summary>
            <param name="owner">The owner/schema in the destination data source</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.OwnerMapping.System#Collections#Generic#IEnumerable{ApexSql#Diff#Structure#OwnerMappingItem}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:ApexSql.Diff.Structure.OwnerMapping.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:ApexSql.Diff.Structure.OwnerMapping.Count">
            <summary>
            The count of elements in the collection
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.OwnerMapping.Item(System.Int32)">
            <summary>
            Returns the owner mapping item
            </summary>
            <param name="index">The zero-based index of the element to get</param>
            <returns>The owner mapping item</returns>
        </member>
        <member name="T:ApexSql.Diff.DiffException">
            <summary>
            A base ApexSQL Diff exception class
            </summary>
        </member>
        <member name="M:ApexSql.Diff.DiffException.#ctor(System.String)">
            <summary>
            Construct an exception
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:ApexSql.Diff.DiffException.#ctor(System.String,System.Exception)">
            <summary>
            Construct an exception
            </summary>
            <param name="message">The message</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="T:ApexSql.Diff.CancelException">
            <summary>
            A cancel exception
            </summary>
        </member>
        <member name="M:ApexSql.Diff.CancelException.#ctor(System.String,System.Exception)">
            <summary>
            Construct an exception
            </summary>
            <param name="message">The message</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="T:ApexSql.Diff.UnhandledException">
            <summary>
            An unhandled exception. Write exception report to the disk after created
            </summary>
        </member>
        <member name="M:ApexSql.Diff.UnhandledException.#ctor(ApexSql.Diff.ProjectBase,System.String)">
            <summary>
            Construct an exception
            </summary>
            <param name="project">The project in which exception occured</param>
            <param name="message">The message</param>
        </member>
        <member name="M:ApexSql.Diff.UnhandledException.#ctor(ApexSql.Diff.ProjectBase,System.String,System.Exception)">
            <summary>
            Construct an exception
            </summary>
            <param name="project">The project in which exception occured</param>
            <param name="message">The message</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:ApexSql.Diff.UnhandledException.SaveToDisk">
            <summary>
            Save the exception to the log file with default name
            </summary>
        </member>
        <member name="M:ApexSql.Diff.UnhandledException.SaveToDisk(System.String)">
            <summary>
            Save the exception to the log file
            </summary>
            <param name="filePath">The path to file to save the exception to.
            If filePath is directory then exception is saved to this directory with default name.
            </param>
        </member>
        <member name="P:ApexSql.Diff.UnhandledException.LogFilePath">
            <summary>
            Get log file path.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.ServerErrorException">
            <summary>
            A server error exception
            </summary>
        </member>
        <member name="M:ApexSql.Diff.ServerErrorException.#ctor(System.String)">
            <summary>
            Construct an exception
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:ApexSql.Diff.ServerErrorException.#ctor(System.String,System.Exception)">
            <summary>
            Construct an exception
            </summary>
            <param name="message">The message</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="T:ApexSql.Diff.ActivationException">
            <summary>
            A activation exception
            </summary>
        </member>
        <member name="M:ApexSql.Diff.ActivationException.#ctor(System.String)">
            <summary>
            Construct an exception
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:ApexSql.Diff.ActivationException.#ctor(System.String,System.Exception)">
            <summary>
            Construct an exception
            </summary>
            <param name="message">The message</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="T:ApexSql.Diff.NotEnoughRightsException">
            <summary>
            An exception when not enough rights for operations
            </summary>
        </member>
        <member name="M:ApexSql.Diff.NotEnoughRightsException.#ctor(System.String,System.Exception)">
            <summary>
            Construct an exception
            </summary>
            <param name="message">The message</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:ApexSql.Diff.NotEnoughRightsException.#ctor(System.String)">
            <summary>
            Construct an exception
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="T:ApexSql.Diff.InvalidConnectionException">
            <summary>
            An invalid connection
            </summary>
        </member>
        <member name="M:ApexSql.Diff.InvalidConnectionException.#ctor(System.String,System.Exception)">
            <summary>
            Construct an exception
            </summary>
            <param name="message">The message</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:ApexSql.Diff.InvalidConnectionException.#ctor(System.String)">
            <summary>
            Construct an exception
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="T:ApexSql.Diff.FileIOException">
            <summary>
            A file IO exception
            </summary>
        </member>
        <member name="M:ApexSql.Diff.FileIOException.#ctor(System.String,System.Exception)">
            <summary>
            Construct an exception
            </summary>
            <param name="message">The message</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:ApexSql.Diff.FileIOException.#ctor(System.String)">
            <summary>
            Construct an exception
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="T:ApexSql.Diff.NoSelectedForOperationObjectsException">
            <summary>
            An exception occured when no selected for operation objects
            </summary>
        </member>
        <member name="M:ApexSql.Diff.NoSelectedForOperationObjectsException.#ctor(System.String,System.Exception)">
            <summary>
            Construct an exception
            </summary>
            <param name="message">The message</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:ApexSql.Diff.NoSelectedForOperationObjectsException.#ctor(System.String)">
            <summary>
            Construct an exception
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="T:ApexSql.Diff.IProgressInfo">
            <summary>
            A callback interface with an information about progress
            </summary>
        </member>
        <member name="M:ApexSql.Diff.IProgressInfo.SetText(System.String)">
            <summary>
            Set progress text
            </summary>
            <param name="text">The text to change current text to</param>
        </member>
        <member name="M:ApexSql.Diff.IProgressInfo.SetMin(System.Int32)">
            <summary>
            Set minimum value for the progress
            </summary>
            <param name="minValue">The minimum progress value</param>
        </member>
        <member name="M:ApexSql.Diff.IProgressInfo.SetMax(System.Int32)">
            <summary>
            Set maximum value for the progress
            </summary>
            <param name="maxValue">The maximum progress value</param>
        </member>
        <member name="M:ApexSql.Diff.IProgressInfo.SetTo(System.Int32)">
            <summary>
            Set progress value to the specified value
            </summary>
        </member>
        <member name="M:ApexSql.Diff.IProgressInfo.Inc">
            <summary>
            Increment progress
            </summary>
        </member>
        <member name="P:ApexSql.Diff.IProgressInfo.StopNeeded">
            <summary>
            Is stop needed
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.View">
            <summary>
            The View object represents a Microsoft SQL Server view. 
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.View.AnsiNullsStatus">
            <summary>
            Gets the Boolean property value that specifies whether SQL-92 NULL handling is enabled on the view.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.View.CreateDate">
            <summary>
            Gets the date and time when the view was created.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.View.DateLastModified">
            <summary>
            Gets the date and time when the view was last modified.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.View.HasAfterTrigger">
            <summary>
            Gets the Boolean property value that specifies whether the table has any after triggers.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.View.HasColumnSpecification">
            <summary>
            Gets the Boolean property that specifies whether the view has a column specification.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.View.HasDeleteTrigger">
            <summary>
            Gets the Boolean property value that specifies whether the view has a delete trigger.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.View.HasIndex">
            <summary>
            Gets the Boolean property value that specifies whether the view has at least one index.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.View.HasInsertTrigger">
            <summary>
            Gets the Boolean property value that specifies whether the view has an insert trigger.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.View.HasInsteadOfTrigger">
            <summary>
            Gets the Boolean property value that specifies whether the view has any instead of triggers.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.View.HasUpdateTrigger">
            <summary>
            Gets the Boolean property value that specifies whether the view has an update trigger.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.View.ID">
            <summary>
            Gets the ID value that uniquely identifies the view.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.View.IsEncrypted">
            <summary>
            Gets the Boolean property that specifies whether the view is encrypted.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.View.IsIndexable">
            <summary>
            Gets the Boolean property that specifies whether it is possible to place an index on the view.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.View.IsSchemaBound">
            <summary>
            Gets the Boolean property that specifies whether a schema is bound to the view.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.View.QuotedIdentifierStatus">
            <summary>
            Gets a Boolean property value that specifies whether identifiers delimited by double quotation marks are Transact-SQL reserved keywords or contain characters not usually allowed by the Transact-SQL syntax rules.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.View.ReturnsViewMetadata">
            <summary>
            Gets a Boolean property value that specifies whether the view returns metadata.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.View.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.TriggerExecOrder">
            <summary>
            Values that are used to specify when the trigger runs when insert, update, or delete operation are performed.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.TriggerExecOrder.Before">
            <summary>
            Execute before insert, update or delete
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.TriggerExecOrder.After">
            <summary>
            Execute after insert, update or delete
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.TriggerExecOrder.None">
            <summary>
            Do not execute 
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.FileGroup">
            <summary>
            The FileGroup object represents a Microsoft SQL Server file group.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FileGroup.ID">
            <summary>
            Gets the ID value that uniquely identifies the file group.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FileGroup.IsDefault">
            <summary>
            Gets the Boolean value that specifies whether the file group is the default file group for the database.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FileGroup.Parent">
            <summary>
            Gets the parent Database object of the FileGroup object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FileGroup.ReadOnly">
            <summary>
            Gets the Boolean value that specifies whether the file group is read-only.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FileGroup.Size">
            <summary>
            Gets the size of the file group in kilobytes.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FileGroup.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.DataType">
            <summary>
            The DataType object represents a Microsoft SQL Server data type.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.DataType.ToString">
            <summary>
            Returns the object in string format.
            </summary>
            <returns>A String object value that contains the object in string format.</returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DataType.MaximumLength">
            <summary>
            Gets the maximum length of the data type.
            </summary>
            <value>
            An Int32 value that specifies the maximum length of the data type.
            </value>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DataType.Name">
            <summary>
            Gets the name of the data type.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DataType.NumericPrecision">
            <summary>
            Gets the numeric precision of the data type.
            </summary>
            <value>
            An Int32 value that specifies the numeric precision of the data type.
            </value>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DataType.NumericScale">
            <summary>
            Gets the numeric scale of the data type.
            </summary>
            <value>
            An Int32 value that specifies the numeric scale of the data type.
            </value>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DataType.Schema">
            <summary>
            Gets the schema of the data type.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DataType.SqlDataType">
            <summary>
            Gets a data type that specifies the SqlDataType definition used in the data type.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DataType.XmlDocumentConstraint">
            <summary>
            Gets value that specify the constraints imposed on an XML data type.
            </summary>
            <value>
            A value that specify the constraints imposed on an XML data type. This property returns XmlDocumentConstraint.Default for other data types.
            </value>
        </member>
        <member name="T:ApexSql.Diff.Diff">
            <summary>
            Represents access to collections of servers, structure, data projects
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Diff.EnumerateSQLServers">
            <summary>
            Fill SqlServers
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Diff.GenerateSourceControl(ApexSql.Diff.ConnectionProperties,ApexSql.Diff.SourceControlFolderInfo)">
            <summary>
            Generate source control for the specified database
            </summary>
            <param name="databaseConnection">The description of the database</param>
            <param name="sourceControl">The source control info</param>
            <exception cref="T:ApexSql.Diff.CancelException">Occurs when user cancel operation</exception>
            <exception cref="T:ApexSql.Diff.FileIOException">Occurs when file is readonly or you have no rights to write file</exception>
            <exception cref="T:ApexSql.Diff.InvalidConnectionException">Occurs when database connection to database is invalid</exception>
            <exception cref="T:ApexSql.Diff.NotEnoughRightsException">Occurs when current user has no enough rights to perform operation</exception>
            <exception cref="T:ApexSql.Diff.ServerErrorException">Error from Server (i.e. when execute SQL request)</exception>
            <exception cref="T:ApexSql.Diff.UnhandledException">Occurs when unexpected error was appeared</exception>
        </member>
        <member name="M:ApexSql.Diff.Diff.GenerateSourceControl(ApexSql.Diff.ConnectionProperties,ApexSql.Diff.SourceControlFolderInfo,ApexSql.Diff.IProgressInfo)">
            <summary>
            Generate source control for the specified database
            </summary>
            <param name="databaseConnection">The description of the database</param>
            <param name="sourceControl">The source control info</param>
            <param name="progressInfo">The progress info to output progress to</param>
            <exception cref="T:ApexSql.Diff.CancelException">Occurs when user cancel operation</exception>
            <exception cref="T:ApexSql.Diff.FileIOException">Occurs when file is readonly or you have no rights to write file</exception>
            <exception cref="T:ApexSql.Diff.InvalidConnectionException">Occurs when database connection to database is invalid</exception>
            <exception cref="T:ApexSql.Diff.NotEnoughRightsException">Occurs when current user has no enough rights to perform operation</exception>
            <exception cref="T:ApexSql.Diff.ServerErrorException">Error from Server (i.e. when execute SQL request)</exception>
            <exception cref="T:ApexSql.Diff.UnhandledException">Occurs when unexpected error was appeared</exception>
        </member>
        <member name="M:ApexSql.Diff.Diff.GenerateScriptFolder(ApexSql.Diff.ConnectionProperties,ApexSql.Diff.ScriptFolderInfo)">
            <summary>
            Generate script folder for the specified database
            </summary>
            <param name="databaseConnection">The description of the database</param>
            <param name="scriptFolder">The script folder</param>
            <exception cref="T:ApexSql.Diff.CancelException">Occurs when user cancel operation</exception>
            <exception cref="T:ApexSql.Diff.FileIOException">Occurs when file is readonly or you have no rights to write file</exception>
            <exception cref="T:ApexSql.Diff.InvalidConnectionException">Occurs when database connection to database is invalid</exception>
            <exception cref="T:ApexSql.Diff.NotEnoughRightsException">Occurs when current user has no enough rights to perform operation</exception>
            <exception cref="T:ApexSql.Diff.ServerErrorException">Error from Server (i.e. when execute SQL request)</exception>
            <exception cref="T:ApexSql.Diff.UnhandledException">Occurs when unexpected error was appeared</exception>
        </member>
        <member name="M:ApexSql.Diff.Diff.GenerateScriptFolder(ApexSql.Diff.ConnectionProperties,ApexSql.Diff.ScriptFolderInfo,ApexSql.Diff.IProgressInfo)">
            <summary>
            Generate script folder for the specified database
            </summary>
            <param name="databaseConnection">The description of the database</param>
            <param name="scriptFolder">The script folder</param>
            <param name="progressInfo">The progress info to output progress to</param>
            <exception cref="T:ApexSql.Diff.CancelException">Occurs when user cancel operation</exception>
            <exception cref="T:ApexSql.Diff.FileIOException">Occurs when file is readonly or you have no rights to write file</exception>
            <exception cref="T:ApexSql.Diff.InvalidConnectionException">Occurs when database connection to database is invalid</exception>
            <exception cref="T:ApexSql.Diff.NotEnoughRightsException">Occurs when current user has no enough rights to perform operation</exception>
            <exception cref="T:ApexSql.Diff.ServerErrorException">Error from Server (i.e. when execute SQL request)</exception>
            <exception cref="T:ApexSql.Diff.UnhandledException">Occurs when unexpected error was appeared</exception>
        </member>
        <member name="M:ApexSql.Diff.Diff.GenerateSnapshot(ApexSql.Diff.ConnectionProperties,System.String,ApexSql.Diff.IProgressInfo)">
            <summary>
            Generate snapshot for the specified database
            </summary>
            <param name="databaseConnection">The description of the database</param>
            <param name="snapshotFilePath">The path to save snapshot to</param>
            <param name="progressInfo">The progress info to output progress to</param>
            <exception cref="T:ApexSql.Diff.CancelException">Occurs when user cancel operation</exception>
            <exception cref="T:ApexSql.Diff.FileIOException">Occurs when file is readonly or you have no rights to write file</exception>
            <exception cref="T:ApexSql.Diff.InvalidConnectionException">Occurs when database connection to database is invalid</exception>
            <exception cref="T:ApexSql.Diff.NotEnoughRightsException">Occurs when current user has no enough rights to perform operation</exception>
            <exception cref="T:ApexSql.Diff.ServerErrorException">Error from Server (i.e. when execute SQL request)</exception>
            <exception cref="T:ApexSql.Diff.UnhandledException">Occurs when unexpected error was appeared</exception>
        </member>
        <member name="M:ApexSql.Diff.Diff.GenerateSnapshot(ApexSql.Diff.ConnectionProperties,System.String)">
            <summary>
            Generate snapshot for the specified database
            </summary>
            <param name="databaseConnection">The description of the database</param>
            <param name="snapshotFilePath">The path to save snapshot to</param>
            <exception cref="T:ApexSql.Diff.CancelException">Occurs when user cancel operation</exception>
            <exception cref="T:ApexSql.Diff.FileIOException">Occurs when file is readonly or you have no rights to write file</exception>
            <exception cref="T:ApexSql.Diff.InvalidConnectionException">Occurs when database connection to database is invalid</exception>
            <exception cref="T:ApexSql.Diff.NotEnoughRightsException">Occurs when current user has no enough rights to perform operation</exception>
            <exception cref="T:ApexSql.Diff.ServerErrorException">Error from Server (i.e. when execute SQL request)</exception>
            <exception cref="T:ApexSql.Diff.UnhandledException">Occurs when unexpected error was appeared</exception>
        </member>
        <member name="P:ApexSql.Diff.Diff.Author">
            <summary>
            The author information to place into the script
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Diff.Legal">
            <summary>
            The legal information to place into the script
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Diff.SqlServers">
            <summary>
            The collection of sql server names
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Diff.Version">
            <summary>
            The version of the ApexSQL Diff Engine
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Diff.ActivationManager">
            <summary>
            The activation manager
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Diff.StructureProjects">
            <summary>
            The array of recent used structure project paths
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Diff.DataProjects">
            <summary>
            The array of recent used data project paths
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Commons.ParseFullName(System.String,System.String@,System.String@,System.String@)">
            <summary>
            Parse three (two, one)- part name 
            </summary>
            <param name="fullName">full object name</param>
            <param name="database"></param>
            <param name="owner"></param>
            <param name="name"></param>
        </member>
        <member name="M:ApexSql.Diff.Commons.ParseFullName(System.String,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Parse four (three, two, one)- part name 
            </summary>
            <param name="fullName">full object name</param>
            <param name="server"></param>
            <param name="database"></param>
            <param name="owner"></param>
            <param name="name"></param>
        </member>
        <member name="T:ApexSql.Diff.Structure.Summary">
            <summary>
            A summary
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.Summary.StructureObject">
            <summary>
            The structure object on which summary generated
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.Summary.MessageType">
            <summary>
            The message type
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.Summary.Text">
            <summary>
            The message text
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.SummaryCollection">
            <summary>
            A collection of summaries
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Structure.SummaryCollection.System#Collections#Generic#IEnumerable{ApexSql#Diff#Structure#Summary}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:ApexSql.Diff.Structure.SummaryCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:ApexSql.Diff.Structure.SummaryCollection.Item(System.Int32)">
            <summary>
            Returns the summary
            </summary>
            <param name="index">The zero-based index of the summary to get</param>
            <returns>The summary at the specified index, otherwise - null</returns>
        </member>
        <member name="P:ApexSql.Diff.Structure.SummaryCollection.Count">
            <summary>
            The count of elements
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.SqlObjectType">
            <summary>
            An Sql object type
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.Assembly">
            <summary>
            Assembly
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.Check">
            <summary>
            AsymmetricKey
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.Column">
            <summary>
            Column
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.Contract">
            <summary>
            Contract
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.Credential">
            <summary>
            Credential
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.Database">
            <summary>
            Database
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.DatabaseDdlTrigger">
            <summary>
            Database Ddl Trigger
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.Role">
            <summary>
            Role
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.Datatype">
            <summary>
            Datatype
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.Default">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.DefaultConstraint">
            <summary>
            DefaultConstraint
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.EventNotification">
            <summary>
            Event Notification
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.ExtendedProperty">
            <summary>
            Extended Property
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.ForeignKey">
            <summary>
            ForeignKey
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.FullTextCatalog">
            <summary>
            Full Text Catalog
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.FullTextIndex">
            <summary>
            FullText Index
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.FullTextIndexColumn">
            <summary>
            FullText Index Column
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.Index">
            <summary>
            Index
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.IndexedColumn">
            <summary>
            Indexed Column
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.MessageType">
            <summary>
            Message Type
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.PartitionFunction">
            <summary>
            Partition Function
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.PartitionFunctionParameter">
            <summary>
            Partition Function Parameter
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.PartitionScheme">
            <summary>
            Partition Scheme
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.PartitionSchemeParameter">
            <summary>
            Partition Scheme Parameter
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.RemoteServiceBinding">
            <summary>
            Remote Service Binding
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.Route">
            <summary>
            Route
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.Rule">
            <summary>
            Rule
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.Queue">
            <summary>
            Queue
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.Schema">
            <summary>
            Schema
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.Server">
            <summary>
            Server
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.Service">
            <summary>
            Service
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.Statistic">
            <summary>
            Statistic
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.StatisticColumn">
            <summary>
            Statistic Column
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.Synonym">
            <summary>
            Synonym
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.StoredProcedure">
            <summary>
            Stored Procedure
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.Table">
            <summary>
            Table
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.Trigger">
            <summary>
            Trigger
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.User">
            <summary>
            User
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.UserDefinedDataType">
            <summary>
            User Defined Data Type
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.UserDefinedFunction">
            <summary>
            User Defined Function
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.Parameter">
            <summary>
            Parameter
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.View">
            <summary>
            View
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.XmlSchemaCollection">
            <summary>
            Xml Schema Collection
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.FileGroup">
            <summary>
            FileGroup
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlObjectType.ServiceBroker">
            <summary>
            Service Broker
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.SqlObjectTypeHelper">
            <summary>
            	Helper class for SqlObjectType enumerator. It contains helper functions
            that allows to get correct compatibility level of object and so on
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.SqlObjectTypeHelper.GetCompatibilityLevel(ApexSql.Diff.SqlServer.SqlObjectType)">
            <summary>
            	Detects minimum compatibility level of the object. I.e. server with
            what compatibility level supports objects of specified type. By default
            minimal supported level is returned.
            </summary>
            <param name="sqlObjectType"></param>
            <returns></returns>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.DefaultConstraint">
            <summary>
            The DefaultConstraint object represents a Microsoft SQL Server default constraint.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.DefaultConstraint.Script">
            <summary>
            Generates a Transact-SQL script that can be used to re-create the SQL object.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.DefaultConstraint.Script(ApexSql.Diff.SqlServer.ScriptingOptions)">
            <summary>
            Generates a Transact-SQL script that can be used to re-create/drop the SQL object.
            </summary>
            <param name="scriptingOptions">Scripting options.</param>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DefaultConstraint.CreateDate">
            <summary>
            Gets the date when the default constraint was created.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DefaultConstraint.DateLastModified">
            <summary>
            Gets the date when the default constraint was last modified.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DefaultConstraint.ExtendedProperties">
            <summary>
            Gets the extended properties of the object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DefaultConstraint.ID">
            <summary>
            Gets the ID value that uniquely identifies the object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DefaultConstraint.IsSystemNamed">
            <summary>
            Gets the value that specifies whether the default constraint was named automatically by MSSQL or named by the database object creator.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DefaultConstraint.Parent">
            <summary>
            Get parent object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DefaultConstraint.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.DefaultConstraint.Text">
            <summary>
            Gets the T-SQL statement that defines the check constraint
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.ChangeTracking">
            <summary>
            The ChangeTracking enumeration contains values that are used to specify change tracking in a full-text index.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ChangeTracking.Automatic">
            <summary>
            Automatic (background) change tracking.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ChangeTracking.Manual">
            <summary>
            Manual change tracking. 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.ChangeTracking.Off">
            <summary>
            Change tracking is disabled.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.Broker.BrokerService">
            <summary>
            The BrokerService object represents a Service Broker service, which is an addressable endpoint for conversations.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Broker.BrokerService.Script">
            <summary>
            Generates a Transact-SQL script that can be used to re-create the SQL object.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Broker.BrokerService.Script(ApexSql.Diff.SqlServer.ScriptingOptions)">
            <summary>
            Generates a Transact-SQL script that can be used to re-create/drop the SQL object.
            </summary>
            <param name="scriptingOptions">Scripting options.</param>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.BrokerService.Owner">
            <summary>
            Gets the owner of the object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.BrokerService.ExtendedProperties">
            <summary>
            Gets the extended properties of the object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.BrokerService.ID">
            <summary>
            Gets the ID value that uniquely identifies the object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.BrokerService.Parent">
            <summary>
            Gets the Database object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.BrokerService.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.BrokerService.QueueName">
            <summary>
            Gets the queue that the service uses to hold messages.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.BrokerService.QueueSchema">
            <summary>
            Gets the schema for the queue that the service uses to hold messages.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.BrokerService.ServiceContracts">
            <summary>
            he contracts used by the services
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.MappedObject">
            <summary>
            A mapped object
            </summary>
        </member>
        <member name="F:ApexSql.Diff.Structure.MappedObject.co">
            <summary> Catalog object</summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.MappedObject.ObjectType">
            <summary>
            The SqlObjectType of the object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.MappedObject.SourceName">
            <summary>
            The name of the source object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.MappedObject.SourceOwner">
            <summary>
            The owner of the source object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.MappedObject.DestinationName">
            <summary>
            The name of the destination object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.MappedObject.DestinationOwner">
            <summary>
            The owner of the destination object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.MappedObject.IsInSource">
            <summary>
            Is object in source data source
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.MappedObject.IsInDestination">
            <summary>
            Is object in destination data source
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.MappedObject.IncludeInComparison">
            <summary>
            Include object in comparison
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.SynchronizationOptions">
            <summary>
            Options used when synchronizing databases
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.SynchronizationOptions.IncludeDependentObjects">
            <summary>
            Include dependent objects to the synchronization script
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.SynchronizationOptions.UseDropCreateInsteadOfAlter">
            <summary>
            Use DROP/CREATE instead of ALTER
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.SynchronizationOptions.DisableDdlTriggers">
            <summary>
            Disable DDL triggers during synchronization 
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.SynchronizationOptions.IncludeExistenceChecks">
            <summary>
            Decorate all statements with check for object existence
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.SynchronizationOptions.AddWithEncryption">
            <summary>
            Add WITH ENCRYPTION to all script based objects
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.SynchronizationOptions.ParseExplicitly">
            <summary>
            Disable <see cref="P:ApexSql.Diff.Structure.SynchronizationOptions.IncludeDependentObjects">Include dependent objects</see> and <see cref="P:ApexSql.Diff.Structure.SynchronizationOptions.ManageOwners">Manage owners</see> when false
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.SynchronizationOptions.ScriptUseForDatabase">
            <summary>
            Include USE statement into the synchronization script
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.SynchronizationOptions.ManageOwners">
            <summary>
            Manage owners
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.SynchronizationOptions.NameQualificationType">
            <summary>
            Type of the owner processing when generating synchronization script
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.NameQualificationType">
            <summary>
            An owner processing type for the synchronization script
            </summary>
        </member>
        <member name="F:ApexSql.Diff.Structure.NameQualificationType.Include">
            <summary>
            Include owners
            </summary>
        </member>
        <member name="F:ApexSql.Diff.Structure.NameQualificationType.ExcludeAlways">
            <summary>
            Exclude all owners
            </summary>
        </member>
        <member name="F:ApexSql.Diff.Structure.NameQualificationType.ExcludeIfDifferentFromConnected">
            <summary>
            Exclude owner if it different from connected
            </summary>
        </member>
        <member name="F:ApexSql.Diff.Structure.NameQualificationType.ExcludeIfDifferentFromDbo">
            <summary>
            Exclude owner if it is not a dbo user
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.Broker.ServiceRouteCollection">
            <summary>
            Collection of ServiceRoute objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.Broker.MessageTypeMapping">
            <summary>
            The MessageTypeMapping object represents a relationship between a message types and a contract
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.MessageTypeMapping.MessageSource">
            <summary>
            Gets the message type source.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.MessageTypeMapping.Name">
            <summary>
            Object name accessor
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.MessageTypeMapping.QualifiedName">
            <summary>
            Gets the fully qualified name of object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.MessageTypeMapping.Parent">
            <summary>
            Gets the ServiceContract object that is the parent of the MessageTypeMapping object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Broker.MessageTypeMapping.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Data.DataProject">
            <summary>
            A data project
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Data.DataProject.UpdateRecentProjectNameList(System.String)">
            <summary>
            Update list of recent used project files
            </summary>
            <param name="name">project file name</param>
        </member>
        <member name="M:ApexSql.Diff.Data.DataProject.#ctor(ApexSql.Diff.ConnectionProperties,ApexSql.Diff.ConnectionProperties)">
            <summary>
            Construct project with two databases as source data source and destination data source
            </summary>
            <param name="sourceConnection">The connection properties for the source data source</param>
            <param name="destinationConnection">The connection properties for the destination data source</param>
        </member>
        <member name="M:ApexSql.Diff.Data.DataProject.#ctor(ApexSql.Diff.ConnectionProperties,System.String[])">
            <summary>
            Initializes a new instance of DataProject class.
            </summary>
            <param name="sourceConnection">The connection properties for the source database</param>
            <param name="destinationBackupFiles">The array of backup file names that represents the destination data source</param>
        </member>
        <member name="M:ApexSql.Diff.Data.DataProject.#ctor(System.String[],System.String[])">
            <summary>
            Initializes a new instance of DataProject class.
            </summary>
            <param name="sourceBackupFiles">The array of backup file names that represents the source data source</param>
            <param name="destinationBackupFiles">The array of backup file names that represents the destination data source</param>
        </member>
        <member name="M:ApexSql.Diff.Data.DataProject.#ctor(System.String[],ApexSql.Diff.ConnectionProperties)">
            <summary>
            Initializes a new instance of DataProject class.
            </summary>
            <param name="sourceBackupFiles">The array of backup file names that represents the source data source</param>
            <param name="destinationConnection">The connection properties for the destination database</param>
        </member>
        <member name="M:ApexSql.Diff.Data.DataProject.#ctor(System.String)">
            <summary>
            Construct data project from the project file
            </summary>
            <param name="projectFilePath">The path to the project file</param>
        </member>
        <member name="M:ApexSql.Diff.Data.DataProject.SetSourceDataSource(ApexSql.Diff.ConnectionProperties)">
            <summary>
            Set database as new source data source
            </summary>
            <param name="connectionProperties">The connection properties for the source data source</param>
            <exception cref="T:System.ArgumentException">Occurs when incorrect parameters are specified</exception>
        </member>
        <member name="M:ApexSql.Diff.Data.DataProject.SetDestinationDataSource(ApexSql.Diff.ConnectionProperties)">
            <summary>
            Set database as new destination data source
            </summary>
            <param name="connectionProperties">The connection properties</param>
            <exception cref="T:System.ArgumentException">Occurs when incorrect parameters are specified</exception>
        </member>
        <member name="M:ApexSql.Diff.Data.DataProject.SetSourceDataSource(System.String[])">
            <summary>
            Set backup as new source data source
            </summary>
            <param name="backupFiles">An array of backup files</param>
            <exception cref="T:System.ArgumentException">Occurs when incorrect parameters are specified</exception>
        </member>
        <member name="M:ApexSql.Diff.Data.DataProject.SetDestinationDataSource(System.String[])">
            <summary>
            Set backup as new destination data source
            </summary>
            <param name="backupFiles">An array of backup files</param>
            <exception cref="T:System.ArgumentException">Occurs when incorrect parameters are specified</exception>
        </member>
        <member name="M:ApexSql.Diff.Data.DataProject.ResetDataSources">
            <summary>
            Reset data sources
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Data.DataProject.GetSourceDataSource">
            <summary>
            Gets source data source
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApexSql.Diff.Data.DataProject.GetDestinationDataSource">
            <summary>
            Gets destination data source
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApexSql.Diff.Data.DataProject.BeforeApplyingProfile">
            <summary>
            Behaviour before applying project profile
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Data.DataProject.LoadSelectionProfile(System.String)">
            <summary>
            Load selection profile from the file
            </summary>
            <param name="profilePath">The path to selection profile</param>
            <exception cref="T:ApexSql.Diff.FileIOException">Occurs when file operation is failed</exception>
            <exception cref="T:ApexSql.Diff.UnhandledException">Occurs when an unexpected error is encountered</exception>
        </member>
        <member name="M:ApexSql.Diff.Data.DataProject.GenerateCsvReport(System.String)">
            <summary>
            Generate CSV report (a bunch of the files)
            </summary>
            <param name="folder">The folder where CSV report files will be placed</param>
            <exception cref="T:ApexSql.Diff.CancelException">Occurs when user cancels operation</exception>
            <exception cref="T:ApexSql.Diff.FileIOException">Occurs when file is readonly or user has no rights to write to the file</exception>
            <exception cref="T:ApexSql.Diff.UnhandledException">Occurs when an unexpected error is encountered</exception>
        </member>
        <member name="M:ApexSql.Diff.Data.DataProject.Clone">
            <summary>
            Clone this project
            </summary>
            <returns>The project cloned</returns>
        </member>
        <member name="M:ApexSql.Diff.Data.DataProject.CheckMappedCollections">
            <summary>
            Check mapped collection before comparison 
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataProject.SourceDataSource">
            <summary>
            The source data source
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataProject.DestinationDataSource">
            <summary>
            The destination data source
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataProject.SourceConnectionProperties">
            <summary>
            Gets source connection properties.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataProject.DestinationConnectionProperties">
            <summary>
            Gets destination connection properties.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataProject.StoreSourceEncryptedPassword">
            <summary>
            Whether source password is stored in encrypted form.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataProject.StoreDestinationEncryptedPassword">
            <summary>
            Whether destination password is stored in encrypted form.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataProject.ComparisonOptions">
            <summary>
            The options used when comparing databases
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataProject.SynchronizationOptions">
            <summary>
            The options used when synchronizing databases
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataProject.ObjectTypeFilter">
            <summary>
            The objects types to load
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataProject.CsvReportOptions">
            <summary>
            The options used when generating CSV report
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataProject.HtmlReportOptions">
            <summary>
            The options used when generating HTML report
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataProject.Catalog">
            <summary>
            Catalog with all objects available comparison and synchronization
            Contains several object collections (one for all Tables, one for all Views, etc)
            and methods performing operations with the collections
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataProject.MappedObjects">
            <summary>
            The collection of mapped objects
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataProject.MappedTables">
            <summary>
            The collection of mapped tables
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataProject.MappedViews">
            <summary>
            The collection of mapped views
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataProject.ComparedObjects">
            <summary>
            The collection of compared objects
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataProject.ComparedTables">
            <summary>
            The collection of compared tables
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.DataProject.ComparedViews">
            <summary>
            The collection of compared views
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.FolderMappingItem">
            <summary>
            A folder mapping item
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Structure.FolderMappingItem.#ctor(ApexSql.Common.SourceControl.DbTypeToFileNameMapItem)">
            <summary>
            Constructs folder mapping item based on DbTypeToFileNameMapItem
            </summary>
            <param name="sourceDbItem">The owner/schema in the source data source</param>
        </member>
        <member name="P:ApexSql.Diff.Structure.FolderMappingItem.ObjectType">
            <summary>
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.FolderMappingItem.IsIncluded">
            <summary>
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.FolderMappingItem.Folder">
            <summary>
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.FolderMappingItem.FileName">
            <summary>
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.FolderMappingItem.Extension">
            <summary>
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Structure.FolderMappingItem.WriteToSubfolder">
            <summary>
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Structure.FolderMapping">
            <summary>
            An owner/schema mapping
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Structure.FolderMapping.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Structure.FolderMapping.LoadFolderMapping(System.String)">
            <summary>
            Load owner/schema mapping profile
            </summary>
            <param name="folderMappingFilePath">The path to owner mapping file</param>
            <exception cref="T:ApexSql.Diff.FileIOException">Occurs when operation cancelled</exception>
        </member>
        <member name="M:ApexSql.Diff.Structure.FolderMapping.SaveFolderMapping(System.String)">
            <summary>
            Save owner/schema mapping profile
            </summary>
            <param name="folderMappingFilePath">The path to owner mapping file</param>
        </member>
        <member name="M:ApexSql.Diff.Structure.FolderMapping.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:ApexSql.Diff.Structure.FolderMapping.Item(ApexSql.Diff.SqlServer.SqlObjectType)">
            <summary>
            Returns the owner mapping item
            </summary>
            <param name="objectType">The zero-based index of the element to get</param>
            <returns>The owner mapping item</returns>
        </member>
        <member name="P:ApexSql.Diff.Structure.FolderMapping.Item(System.String)">
            <summary>
            Returns the owner mapping item
            </summary>
            <param name="objectType">The zero-based index of the element to get</param>
            <returns>The owner mapping item</returns>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.Trigger">
            <summary>
            The Trigger object represents a Microsoft SQL Server trigger.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Trigger.Script">
            <summary>
            Generates a Transact-SQL script that can be used to re-create the trigger
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Trigger.Script(ApexSql.Diff.SqlServer.ScriptingOptions)">
            <summary>
            Generates a Transact-SQL script that can be used to re-create/drop the SQL object.
            </summary>
            <param name="scriptingOptions">Scripting options.</param>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Trigger.AnsiNullsStatus">
            <summary>
            Gets the Boolean property value that specifies whether SQL-92 NULL handling is enabled in the trigger.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Trigger.AssemblyName">
            <summary>
            Gets the name of the .NET assembly required by the referenced trigger.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Trigger.ClassName">
            <summary>
            Gets the name of the class called by the referenced trigger.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Trigger.DateLastModified">
            <summary>
            Gets the date and time when the trigger was last modified.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Trigger.Delete">
            <summary>
            Gets the Boolean property value that specifies whether the trigger is executed when records are deleted from the table.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Trigger.DeleteOrder">
            <summary>
            Gets the order in which the trigger and the delete operation are executed.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Trigger.ExecutionContext">
            <summary>
            Gets the execution context.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Trigger.ExecutionContextPrincipal">
            <summary>
            Gets the execution context principal.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Trigger.ImplementationType">
            <summary>
            Gets the implementation type of the trigger.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Trigger.Insert">
            <summary>
            Gets the Boolean property value that specifies whether the trigger is fired when records are inserted into the table.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Trigger.InsertOrder">
            <summary>
            Gets the order in which the trigger and the insert operation are executed.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Trigger.InsteadOf">
            <summary>
            Gets a Boolean property that specifies whether the trigger runs instead of the insert, delete, or update operation.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Trigger.IsEnabled">
            <summary>
            Gets the Boolean property that specifies whether the trigger is enabled
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Trigger.IsEncrypted">
            <summary>
            Gets the Boolean property value that specifies whether the trigger is encrypted.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Trigger.IsSystemObject">
            <summary>
            Gets the Boolean property value that specifies whether the trigger is a system object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Trigger.MethodName">
            <summary>
            Gets the method name for the trigger.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Trigger.CreateDate">
            <summary>
            Gets the date and time when the trigger was created.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Trigger.ID">
            <summary>
            Gets the ID value that uniquely identifies the trigger.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Trigger.ExtendedProperties">
            <summary>
            Gets the extended properties of the trigger.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Trigger.Parent">
            <summary>
            Gets the parent object
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Trigger.NotForReplication">
            <summary>
            Gets a Boolean property value that specifies whether the trigger is included in replication operations.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Trigger.QuotedIdentifierStatus">
            <summary>
            Gets a Boolean property value that specifies whether identifiers delimited by double quotation marks are Transact-SQL reserved keywords or contain characters not usually allowed by the Transact-SQL syntax rules.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Trigger.Update">
            <summary>
            Gets the Boolean property value that specifies whether the trigger is fired when records are updated in the table.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Trigger.UpdateOrder">
            <summary>
            Gets the order in which the trigger and the update operation are executed.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Trigger.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.IndexKeyType">
            <summary>
            The IndexKeyType enumeration contains values that are used to specify the type of key on which the index is created.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.IndexKeyType.PrimaryKey">
            <summary>
            The index implements a Microsoft SQL Server PRIMARY KEY constraint.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.IndexKeyType.UniqueKey">
            <summary>
            The index implements a UNIQUE constraint on a table not constrained by a primary key. The index is a candidate key.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.IndexKeyType.None">
            <summary>
            The index is based on a column with no key constraint.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.FullTextIndex">
            <summary>
            The FullTextIndex object represents a Microsoft Search full-text index.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.FullTextIndex.Script">
            <summary>
            Generates a Transact-SQL script that can be used to re-create the SQL object.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.FullTextIndex.Script(ApexSql.Diff.SqlServer.ScriptingOptions)">
            <summary>
            Generates a Transact-SQL script that can be used to re-create/drop the SQL object.
            </summary>
            <param name="scriptingOptions">Scripting options.</param>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FullTextIndex.CatalogName">
            <summary>
            Gets the full-text catalog that supports full-text queries for the referenced full-text index.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FullTextIndex.ChangeTracking">
            <summary>
            Gets the type of change tracking used by the referenced full-text index.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FullTextIndex.DocumentsProcessed">
            <summary>
            Gets the number of documents already processed in the current active crawl on the referenced full-text index.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FullTextIndex.IndexedColumns">
            <summary>
            Represents a collection of FullTextIndexColumn objects. Each FullTextIndexColumn object represents a full-text indexed column on the full-text index.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FullTextIndex.IsEnabled">
            <summary>
            Gets the Boolean property value that specifies whether the referenced full-text index is configured to participate in Microsoft Search full-text indexing.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FullTextIndex.ItemCount">
            <summary>
            Gets the number of full-text indexed items.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FullTextIndex.NumberOfFailures">
            <summary>
            Gets the number of documents that failed to be full-text indexed.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FullTextIndex.Parent">
            <summary>
            Gets the Table object that is the parent of the FullTextIndex object.
            </summary> 
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FullTextIndex.UniqueIndexName">
            <summary>
            Gets a unique name for the full-text index.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.FullTextIndex.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.FileGroupCollection">
            <summary>
            Collection of FileGroup objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.ExtendedPropertyCollection">
            <summary>
            The ExtendedPropertyCollection class represents a collection of ExtendedProperty objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.Broker.ServiceContractCollection">
            <summary>
            Collection of ServiceContract objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Data.KeyType">
            <summary>
            A type of comparison key
            </summary>
        </member>
        <member name="F:ApexSql.Diff.Data.KeyType.PrimaryKeyConstraint">
            <summary>
            Key is Primary Key Constraint
            </summary>
        </member>
        <member name="F:ApexSql.Diff.Data.KeyType.UniqueIndex">
            <summary>
            Key is Unique Index
            </summary>
        </member>
        <member name="F:ApexSql.Diff.Data.KeyType.UniqueConstraint">
            <summary>
            Key is Unique Constraint
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.UserDefinedDataType">
            <summary>
            The UserDefinedDataType object represents a Microsoft SQL Server user-defined data type data type. 
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.UserDefinedDataType.Script">
            <summary>
            Generates a Transact-SQL script that can be used to re-create the user-defined data type. 
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.UserDefinedDataType.Script(ApexSql.Diff.SqlServer.ScriptingOptions)">
            <summary>
            Generates a Transact-SQL script that can be used to re-create/drop the SQL object.
            </summary>
            <param name="scriptingOptions">Scripting options.</param>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedDataType.AllowIdentity">
            <summary>
            Gets the Boolean property value that specifies whether the user-defined data type is able to participate in a column defined with the identity property.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedDataType.Collation">
            <summary>
            Gets the collation assigned to the user-defined data type.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedDataType.Default">
            <summary>
            Gets a Microsoft SQL Server default that is bound to the user-defined data type.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedDataType.DefaultSchema">
            <summary>
            Gets the Microsoft SQL Server default schema for the user-defined data type.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedDataType.ExtendedProperties">
            <summary>
            Gets the extended properties of the object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedDataType.ID">
            <summary>
            Gets the ID value that uniquely identifies the user-defined data type.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedDataType.Owner">
            <summary>
            Gets the owner of the database object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedDataType.Length">
            <summary>
            Gets the number of characters in the user-defined data type.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedDataType.MaxLength">
            <summary>
            Gets the maximum number of characters accepted by the user-defined data type
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedDataType.Nullable">
            <summary>
            Gets the Boolean property value that specifies whether the user-defined data type accepts null values or not.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedDataType.NumericPrecision">
            <summary>
            Gets the maximum number of digits in a numeric value used in the definition of the user-defined data type.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedDataType.NumericScale">
            <summary>
            Gets the maximum number of digits to the right of the decimal point in a numeric value used in the definition of the user-defined data type.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedDataType.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedDataType.Parent">
            <summary>
            Gets the Database object that is the parent of the user-defined data type object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedDataType.Rule">
            <summary>
            Gets a Microsoft SQL Server rule that is bound to the user-defined data type.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedDataType.SystemType">
            <summary>
            Gets or sets the base system data type from which the user-defined data type is derived.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.UserDefinedDataType.VariableLength">
            <summary>
            Gets the Boolean property value that specifies whether the user-defined data type is variable in length.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.StoredProcedure">
            <summary>
            The StoredProcedure object represents a Microsoft SQL Server stored procedure.
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.StoredProcedure.Script">
            <summary>
            Generates a Transact-SQL script that can be used to re-create the stored procedure. 
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.StoredProcedure.Script(ApexSql.Diff.SqlServer.ScriptingOptions)">
            <summary>
            Generates a Transact-SQL script that can be used to re-create/drop the SQL object.
            </summary>
            <param name="scriptingOptions">Scripting options.</param>
            <returns></returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.StoredProcedure.AnsiNullsStatus">
            <summary>
            Gets the Boolean property value that specifies whether SQL-92 NULL handling is enabled in the stored procedure.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.StoredProcedure.AssemblyName">
            <summary>
            Gets the name of the assembly for the stored procedure.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.StoredProcedure.ClassName">
            <summary>
            Gets the name of the class for the stored procedure.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.StoredProcedure.CreateDate">
            <summary>
            Gets the date and time when the stored procedure was created.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.StoredProcedure.DateLastModified">
            <summary>
            Gets date and time when stored procedure was last modified. 
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.StoredProcedure.ExecutionContext">
            <summary>
            Gets the execution context for the user-defined function. 
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.StoredProcedure.ExecutionContextPrincipal">
            <summary>
            Gets the execution context principal for the user-defined function.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.StoredProcedure.ExtendedProperties">
            <summary>
            Gets the extended properties of the object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.StoredProcedure.ForReplication">
            <summary>
            Gets the Boolean property value that specifies whether the stored procedure is available for replication.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.StoredProcedure.ID">
            <summary>
            Gets the ID value that uniquely identifies the stored procedure.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.StoredProcedure.ImplementationType">
            <summary>
            T-SQL or CLR
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.StoredProcedure.IsEncrypted">
            <summary>
            Gets the Boolean property value that specifies whether the stored procedure is encrypted.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.StoredProcedure.IsSystemObject">
            <summary>
            Gets the Boolean property value that specifies whether the stored procedure is a system object. 
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.StoredProcedure.MethodName">
            <summary>
            Gets the method name for the stored procedure.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.StoredProcedure.Parameters">
            <summary>
            Represents a collection of StoredProcedureParameterCollection objects. Each StoredProcedureParameter object represents a parameter defined for the stored procedure.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.StoredProcedure.Parent">
            <summary>
            Gets the Database object that is the parent of the stored procedure object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.StoredProcedure.QuotedIdentifierStatus">
            <summary>
            Gets a Boolean property value that specifies whether identifiers delimited by double quotation marks are Transact-SQL reserved keywords or contain characters not usually allowed by the Transact-SQL syntax rules.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.StoredProcedure.Recompile">
            <summary>
            Gets the Boolean property value that specifies whether the stored procedure is recompiled before execution.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.StoredProcedure.Startup">
            <summary>
            Gets or the Boolean property value that specifies whether the stored procedure runs when the instance of Microsoft SQL Server starts up.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.StoredProcedure.TextBody">
            <summary>
            Gets the Transact-SQL string that defines the stored procedure.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.StoredProcedure.TextHeader">
            <summary>
            Gets the header part of the Transact-SQL string that defines the stored procedure.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.StoredProcedure.TextMode">
            <summary>
            Gets the Boolean property that specifies whether the text header is editable as text.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.StoredProcedure.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.StoredProcedure.Owner">
            <summary>
            Gets the owner of the database object.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.PartitionFunctionParameterCollection">
            <summary>
            Collection of PartitionFunctionParameter objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.PartitionFunctionParameter">
            <summary>
            The PartitionFunctionParameter object provides programmatic access to partition function parameters. 
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.PartitionFunctionParameter.Collation">
            <summary>
            Gets the Microsoft SQL Server collation for the partition function parameter.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.PartitionFunctionParameter.ID">
            <summary>
            Gets the index position of the PartitionFunctionParameter object within the collection.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.PartitionFunctionParameter.Length">
            <summary>
            Gets the length of the parameter in bytes.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.PartitionFunctionParameter.Name">
            <summary>
            Object name accessor
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.PartitionFunctionParameter.QualifiedName">
            <summary>
            Gets the fully qualified name of object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.PartitionFunctionParameter.NumericPrecision">
            <summary>
            Gets the numeric precision of a parameter of a numeric data type.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.PartitionFunctionParameter.NumericScale">
            <summary>
            Gets the numeric scale of a parameter of a numeric data type.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.PartitionFunctionParameter.Parent">
            <summary>
            Gets the PartitionFunction object that is the parent of the PartitionFunctionParameter object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.PartitionFunctionParameter.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.ParameterCollection">
            <summary>
            The ParameterCollection class represents a collection of Parameter objects.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.Parameter">
            <summary>
            Parameter for stored procedure, user-defined function or user-defined aggregate.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Parameter.DataType">
            <summary>
            Gets the data type associated with the parameter.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Parameter.DefaultValue">
            <summary>
            Gets the default value of the parameter.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Parameter.ExtendedProperties">
            <summary>
            Represents a collection of ExtendedProperty objects. Each ExtendedProperty object represents an extended property defined on the Parameter object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Parameter.ID">
            <summary>
            Gets the ID value that uniquely identifies the parameter.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Parameter.IsOutputParameter">
            <summary>
            Gets the Boolean property that specifies whether the parameter is an output parameter.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Parameter.Parent">
            <summary>
            Gets the NamedSqlObject object that is the parent of the Parameter object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Parameter.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Parameter.IsReadOnly">
            <summary>
            Gets the Boolean property that specifies whether the parameter is read only.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.Default">
            <summary>
            The Default object represents a Microsoft SQL Server default. 
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Default.EnumBoundColumns">
            <summary>
            Enumerates a list of columns to which the default is bound.
            </summary>
            <returns>An array of Column objects that specify the columns to which the default is bound.</returns>
        </member>
        <member name="M:ApexSql.Diff.SqlServer.Default.EnumBoundDataTypes">
            <summary>
            Enumerates a list of data types to which the default is bound.
            </summary>
            <returns>An array of UserDefinedDataType objects that specify the data types to which the default is bound.</returns>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Default.CreateDate">
            <summary>
            Gets the date and time when the default was created.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Default.ID">
            <summary>
            Gets the ID value that uniquely identifies the object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Default.SqlObjectType">
            <summary>
            Object type describing type of SQL Server object.
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SqlServer.Default.Owner">
            <summary>
            Gets the owner of the database object.
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SqlServer.SqlDataType">
            <summary>
            A SQL Server data type
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.BigInt">
            <summary>
            A 64-bit signed integer.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.Binary">
            <summary>
            A fixed-length byte array ranging between 1 and 8,000 bytes. 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.Bit">
            <summary>
            An unsigned bit value that can be 0, 1, or a null reference. 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.Char">
            <summary>
            A fixed-length byte array of non-Unicode (256 code page) characters ranging between 1 and 8,000 characters. 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.DateTime">
            <summary>
            A DateTime system object value that specifies a date and time between January 1, 1753 and December 31, 9999 to an accuracy of 3.33 milliseconds. 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.Decimal">
            <summary>
            A fixed precision and fixed scale numeric value between -1038 -1 and +1038 -1. 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.Float">
            <summary>
            An 8-byte floating point number within the range of -1.79E +308 through 1.79E +308. 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.Image">
            <summary>
            A variable-length byte array ranging from 0 to 231 -1 (or 2,147,483,647) bytes. 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.Int">
            <summary>
            A 32-bit signed integer. 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.Money">
            <summary>
            A Decimal system object value that specifies a currency value ranging from -263 (or -922,337,203,685,477.5808) to 2 63 -1 (or +922,337,203,685,477.5807) with an accuracy of 1 in 10,000 of a currency unit. 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.NChar">
            <summary>
            A fixed-length byte array of Unicode characters ranging between 1 and 4,000 characters. 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.None">
            <summary>
            No data type.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.NText">
            <summary>
            A variable-length byte array of Unicode data with a maximum length of 230 - 1 (or 1,073,741,823) characters. 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.Numeric">
            <summary>
            A fixed precision and fixed scale numeric value between -1038 -1 and +1038 -1. 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.NVarChar">
            <summary>
            A variable-length byte array of Unicode characters ranging between 1 and 2^63 characters. 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.NVarCharMax">
            <summary>
            The NVARCHAR(MAX) type.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.Real">
            <summary>
            A 4-bit floating point number within the range of -3.40E +38 through 3.40E +38. 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.SmallDateTime">
            <summary>
            A DataTime system object value that specifies a date and time between January 1, 1900 and June 6, 2079 to an accuracy of one minute. 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.SmallInt">
            <summary>
            A 16-bit signed integer. 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.SmallMoney">
            <summary>
            A Decimal system object value that specifies a currency value ranging from -214,748.3648 to +214,748.3647 with an accuracy of 1 in 10,000 of a currency unit. 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.SysName">
            <summary>
            A system name string.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.Text">
            <summary>
            A variable-length byte array of non-Unicode (256 code page) data with a maximum length of 231 -1 (or 2,147,483,647) characters. 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.Timestamp">
            <summary>
            An automatically generated byte array value, which is guaranteed to be unique within a database. 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.TinyInt">
            <summary>
            An 8-bit unsigned integer. 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.UniqueIdentifier">
            <summary>
            A globally unique identifier (or GUID). 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.UserDefinedDataType">
            <summary>
            A user-defined data type. 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.UserDefinedType">
            <summary>
            A SQLServer common language runtime (CLR) user-defined type.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.VarBinary">
            <summary>
            A variable-length byte array ranging between 1 and 2^64 bytes. 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.VarBinaryMax">
            <summary>
            A VARBINARY(MAX) type.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.VarChar">
            <summary>
            A variable-length byte array of non-Unicode (256 cod epage) characters ranging between 1 and 2^64 characters.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.VarCharMax">
            <summary>
            A VARCHAR(MAX) type.
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.Variant">
            <summary>
            A special data type that can contain numeric, string, binary, date data, and the Microsoft SQL Server values Empty and Null. This data type is assumed if no other type is declared. 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.Xml">
            <summary>
            An XML data type. 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.Date">
            <summary>
            A Date system object value that specifies a date between January 1, 1753 and December 31, 9999 to an accuracy of 3.33 milliseconds. 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.Time">
            <summary>
            A Date system object value that specifies a date between January 1, 1753 and December 31, 9999 to an accuracy of 3.33 milliseconds. 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.DateTime2">
            <summary>
            A Date system object value that specifies a date between January 1, 1753 and December 31, 9999 to an accuracy of 3.33 milliseconds. 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.DateTimeOffset">
            <summary>
            A Date system object value that specifies a date between January 1, 1753 and December 31, 9999 to an accuracy of 3.33 milliseconds. 
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SqlServer.SqlDataType.HierarchyId">
            <summary>
            A Date system object value that specifies a date between January 1, 1753 and December 31, 9999 to an accuracy of 3.33 milliseconds. 
            </summary>
        </member>
        <member name="T:ApexSql.Diff.Data.MappedDataObjectCollection`1">
            <summary>
            A collection of mapped data objects
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Data.MappedDataObjectCollection`1.Clear">
            <summary>
            Unmap all objects
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Data.MappedDataObjectCollection`1.Add(`0,`0)">
            <summary>
            Add mapping of two objects
            </summary>
            <param name="sourceObject">Source data object</param>
            <param name="destinationObject">Destination data object</param>
            <returns>True if mapping has been added</returns>
        </member>
        <member name="M:ApexSql.Diff.Data.MappedDataObjectCollection`1.Remove(ApexSql.Diff.Data.MappedDataObject{`0})">
            <summary>
            Unmap object
            </summary>
            <param name="mappedDataObject">Mapped data object</param>
        </member>
        <member name="M:ApexSql.Diff.Data.MappedDataObjectCollection`1.RemoveAt(System.Int32)">
            <summary>
            Unmap object at specified index
            </summary>
            <param name="index">The zero-based index of the element to unmap</param>
        </member>
        <member name="M:ApexSql.Diff.Data.MappedDataObjectCollection`1.CreateObject(ApexSql.DataDiff.Engine.Model.IMatchedObject)">
            <summary>Create object from IMatchedObject</summary>
        </member>
        <member name="P:ApexSql.Diff.Data.MappedDataObjectCollection`1.Item(System.Int32)">
            <summary>
            Returns a mapped object
            </summary>
            <param name="index">The zero-based index of the element to get</param>
            <returns>The mapped object at the specified index, otherwise - null</returns>
        </member>
        <member name="T:ApexSql.Diff.Data.MappedColumnCollection">
            <summary>
            A collection of mapped data columns
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Data.MappedColumnCollection.GetItemBySourceName(System.String)">
            <summary>
            Search a column in the collection by the source column's name
            </summary>
            <param name="name">The name of the column to search</param>
            <returns>The found column or null if column was not found</returns>
        </member>
        <member name="M:ApexSql.Diff.Data.MappedColumnCollection.GetItemByDestinationName(System.String)">
            <summary>
            Search a column in the collection by the destination column's name
            </summary>
            <param name="name">The name of the column to search</param>
            <returns>The found column or null if column was not found</returns>
        </member>
        <member name="M:ApexSql.Diff.Data.MappedColumnCollection.Add(ApexSql.Diff.SqlServer.Column,ApexSql.Diff.SqlServer.Column)">
            <summary>
            Add a column mapping 
            </summary>
            <param name="sourceColumn">Source column</param>
            <param name="destinationColumn">Destination column</param>
            <returns>True if mapping has been added</returns>
        </member>
        <member name="M:ApexSql.Diff.Data.MappedColumnCollection.Remove(ApexSql.Diff.Data.MappedColumn)">
            <summary>
            Remove object
            </summary>
            <param name="column">Mapped column</param>
        </member>
        <member name="M:ApexSql.Diff.Data.MappedColumnCollection.RemoveAt(System.Int32)">
            <summary>
            Unmap object at specified index
            </summary>
            <param name="index">The zero-based index of the element to unmap</param>
        </member>
        <member name="M:ApexSql.Diff.Data.MappedColumnCollection.CheckAllForComparison(System.Boolean)">
            <summary>
            Check all data object's columns with names from the columnNames
            </summary>
            <param name="check"></param>
        </member>
        <member name="M:ApexSql.Diff.Data.MappedColumnCollection.IncludeAllInComparison">
            <summary>
            Include all columns in comparison
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Data.MappedColumnCollection.ExcludeAllFromComparison">
            <summary>
            Exclude all columns from comparison
            </summary>
        </member>
        <member name="M:ApexSql.Diff.Data.MappedColumnCollection.CheckForComparison(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Check all data object's columns with names from the columnNames
            </summary>
            <param name="columnNames">column names to check</param>
            <param name="check"></param>
        </member>
        <member name="M:ApexSql.Diff.Data.MappedColumnCollection.System#Collections#Generic#IEnumerable{ApexSql#Diff#Data#MappedColumn}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:ApexSql.Diff.Data.MappedColumnCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:ApexSql.Diff.Data.MappedColumnCollection.Count">
            <summary>
            Columns count
            </summary>
        </member>
        <member name="P:ApexSql.Diff.Data.MappedColumnCollection.Item(System.Int32)">
            <summary>
            Returns a mapped column
            </summary>
            <param name="index">The zero-based index of the element to get</param>
            <returns>The mapped column at the specified index, otherwise - null</returns>
        </member>
        <member name="T:ApexSql.Diff.SourceControlType">
            <summary>
            Type of source control
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SourceControlType.Subversion">
            <summary>
            Subversion source control
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SourceControlType.MicrosoftVisualSourceSafe">
            <summary>
            Microsoft Visual SourceSafe source control
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SourceControlType.TeamFoundationServer">
            <summary>
            Team Foundation Server source control
            </summary>
        </member>
        <member name="F:ApexSql.Diff.SourceControlType.SourceGearVault">
            <summary>
            SourceGear Vault source control
            </summary>
        </member>
        <member name="T:ApexSql.Diff.SourceControlFolderInfo">
            <summary>
            Information about source control folder to load as data source
            </summary>
        </member>
        <member name="M:ApexSql.Diff.SourceControlFolderInfo.#ctor(ApexSql.Diff.SourceControlType,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Constructor of Source Control folder
            <param name="sourceControlType">Source control type</param>
            <param name="server">Server name</param>
            <param name="userName">User name</param>
            <param name="password">Password</param>
            <param name="repository">Repository name (for source controls that support repositories)</param>
            <param name="projectPath">Project path</param>
            <param name="label">Label</param>
            <param name="workingFolder">Local working folder set for project path</param>
            <param name="storeEncryptedPassword">Wheather to store password in encrypted form</param>
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SourceControlFolderInfo.Label">
            <summary>
             Label of files to retrieve
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SourceControlFolderInfo.Password">
            <summary>
             The password to use when connecting to source control server
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SourceControlFolderInfo.ProjectPath">
            <summary>
             Path to project/folder where files are located
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SourceControlFolderInfo.Repository">
            <summary>
            Repository name
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SourceControlFolderInfo.Server">
            <summary>
            Source control server name
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SourceControlFolderInfo.SourceControlType">
            <summary>
            Type of source control
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SourceControlFolderInfo.StoreEncryptedPassword">
            <summary>
            Whether store password (in encripted form)
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SourceControlFolderInfo.UserName">
            <summary>
            User name to use when connecting to source control server
            </summary>
        </member>
        <member name="P:ApexSql.Diff.SourceControlFolderInfo.WorkingFolder">
            <summary>
            Local working folder set for project path
            </summary>
        </member>
    </members>
</doc>
